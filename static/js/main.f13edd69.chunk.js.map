{"version":3,"sources":["api/number.ts","api/copy.ts","api/math.ts","components/InputDialog.tsx","api/transformer.ts","components/NetWorthTrendline.tsx","api/csv.ts","App.tsx","serviceWorker.js","index.js"],"names":["HousingNumber","amount","period","raw","Error","acceptedPeriods","Number","includes","join","this","monthly","yearly","fn","to","growableNumberCallbackNoop","n","GrowableNumber","start","rate","onBefore","onAfter","copy","src","dst","k","v","clone","calculate","Investment","principle","contribution","Tax","property","householdIncome","capitalGainsRate","filingStatus","marginalIncomeTaxRate","Loan","term","Housing","plan","downPayment","chargeForRoom","chargeForRoomIncrease","extraBedrooms","utilityCost","insurance","house","House","rental","Rental","repairCost","housePrice","growthRate","hoaFee","loan","buyClosingCosts","sellClosingCosts","paymentIncrease","payment","Data","housing","investment","taxes","inflation","State","data","netWorth","assert","condition","message","expect","console","warn","increaseByRate","chainCalculations","fns","state","month","calculateMonth","_","newPrinciple","principleAfterInterest","newState","rentIncome","increaseByInflation","update","expense","loanPayment","newHouse","months","postFn","numPayments","top","Math","pow","bottom","generateForm","form","onChange","formFields","addFormFields","Object","keys","filter","key","forEach","value","String","field","transformer","obj","prop","type","event","target","buildTransformers","push","Fragment","FormControl","variant","TextField","label","inputType","constructor","name","InputProps","startAdornment","InputAdornment","position","endAdornment","FormHelperText","helper","rank","sort","a","b","map","e","InputDialogData","InputDialog","initialData","onSubmit","onClose","open","React","useState","setData","useEffect","base","generateFormTemplate","newData","Dialog","aria-labelledby","DialogTitle","id","DialogContent","InputLabel","Select","labelId","MenuItem","DialogActions","Button","onClick","color","NetWorthTrendline","years","datum","it","states","result","next","done","i","x","y","transform","margin","right","left","xScale","yScale","min","max","stacked","reverse","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","colors","scheme","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabel","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","decodeCSV","model","csvRows","split","row","csvHeaders","csvModel","length","slice","currentNode","j","fillCSVNode","csvNode","cols","fill","node","t","fromCSV","Boolean","csvBody","rows","JSON","parse","stringify","Row","selected","App","setOpen","setRows","index","setIndex","setInitialData","selectedData","files","file","fr","FileReader","onload","readAsText","height","width","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","padding","Checkbox","checked","inputProps","align","TableBody","hover","handleSelect","role","aria-checked","tabIndex","ButtonGroup","aria-label","IconButton","stopPropagation","handleEdit","Edit","handleRemove","Delete","encodedUri","encodeURI","keyCount","encode","tree","m","visit","prefix","newPrefix","encodedValue","toCSV","Array","isArray","toString","csvCols","encodeCSV","window","accept","htmlFor","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.f13edd69.chunk.js","sourcesContent":["export type Period = 'monthly' | 'yearly'\n\nexport class HousingNumber {\n  constructor(public amount: number, public period: Period) {}\n\n  fromCSV(raw: any): HousingNumber {\n    if (!(\"amount\" in raw && \"period\" in raw)) {\n      throw Error(\"Parse error: amount and period have to exist\");\n    }\n\n    const acceptedPeriods = [\"yearly\", \"monthly\"];\n    let period: Period = \"yearly\";\n    const amount = Number(raw[\"amount\"]);\n    if (acceptedPeriods.includes(raw[\"period\"])) {\n      period = raw[\"period\"] as Period;\n    } else {\n      throw Error(`Parse error: period should be one of [${acceptedPeriods.join(\", \")}], but got ${raw[\"period\"]}`);\n    }\n\n    return new HousingNumber(amount, period);\n  }\n\n  to(period: Period): number {\n    switch (period) {\n      case \"monthly\":\n        return this.monthly();\n      case \"yearly\":\n        return this.yearly();\n    }\n  }\n\n  monthly(): number {\n    let amount = this.amount;\n    if (this.period === \"yearly\") {\n      amount /= 12;\n    }\n\n    return amount;\n  }\n\n  yearly(): number {\n    let amount = this.amount;\n    if (this.period === \"monthly\") {\n      amount *= 12;\n    }\n\n    return amount;\n  }\n\n  update(period: Period, fn: (amount: number) => number) {\n    const amount = this.to(period);\n    this.amount = fn(amount);\n    this.period = period;\n  }\n\n  clone(): HousingNumber {\n    return new HousingNumber(this.amount, this.period);\n  }\n}\n\ntype GrowableNumberCallback = (_: number) => number;\nconst growableNumberCallbackNoop: GrowableNumberCallback = (n: number): number => {\n  return n;\n}\n\nexport class GrowableNumber {\n  constructor(public start: number, public rate: HousingNumber) {}\n\n  *generator(period: Period, onBefore = growableNumberCallbackNoop, onAfter = growableNumberCallbackNoop): Generator<number> {\n    let start = this.start;\n\n    while (true) {\n      start = onBefore(start);\n      start *= (1 + this.rate.to(period));\n      start = onAfter(start);\n      yield start;\n    }\n  }\n\n  clone(): GrowableNumber {\n    return new GrowableNumber(this.start, this.rate);\n  }\n}\n","export function copy<T extends any>(src: T, dst: T) {\n  for (const k in src) {\n    const v = src[k] as any;\n\n    if (v && typeof v.clone === \"function\") {\n      dst[k] = v.clone();\n    } else {\n      dst[k] = v;\n    }\n  }\n\n  return dst;\n}\n","import {HousingNumber, GrowableNumber} from \"./number\";\nimport {copy} from \"./copy\";\n\nexport type Plan = 'house' | 'rental'\nexport type TaxFilingStatus = 'individual' | 'joint'\n\nexport class Investment {\n  principle = new GrowableNumber(100000, new HousingNumber(0.06, \"yearly\"));\n  contribution = new HousingNumber(1000, \"monthly\");\n\n  clone() {\n    const investment = new Investment();\n    return copy(this, investment);\n  }\n}\n\nexport class Tax {\n  property = new HousingNumber(0.01, \"yearly\");\n  householdIncome = new HousingNumber(220000, \"yearly\");\n  capitalGainsRate = .15;\n  filingStatus: TaxFilingStatus = \"joint\";\n  marginalIncomeTaxRate = .24;\n\n  clone(): Tax {\n    const tax = new Tax();\n    return copy(this, tax);\n  }\n}\n\nexport class Loan {\n  term = 30;\n  principle = new GrowableNumber(200000, new HousingNumber(0.03, \"yearly\"));\n\n  clone(): Loan {\n    const loan = new Loan();\n    return copy(this, loan);\n  }\n}\n\nexport class Housing {\n  plan: Plan = \"house\";\n  downPayment = 50000;\n  chargeForRoom = new HousingNumber(600, \"monthly\");\n  chargeForRoomIncrease = new HousingNumber(0.03, \"yearly\");\n  extraBedrooms = 0;\n  utilityCost = new HousingNumber(100, \"monthly\");\n  insurance = new HousingNumber(85, \"monthly\");\n  house = new House();\n  rental = new Rental();\n\n  clone(): Housing {\n    const housing = new Housing();\n    return copy(this, housing);\n  }\n}\n\nexport class House {\n  repairCost = new HousingNumber(500, \"yearly\");\n  housePrice = 250000;\n  growthRate = new HousingNumber(0.04, \"yearly\");\n  hoaFee = new HousingNumber(250, \"monthly\");\n  loan = new Loan();\n  buyClosingCosts = .04;\n  sellClosingCosts = .06;\n\n  clone(): House {\n    const house = new House();\n    return copy(this, house);\n  }\n}\n\nexport class Rental {\n  paymentIncrease = new HousingNumber(0.04, \"yearly\");\n  payment = new HousingNumber(900, \"monthly\");\n\n  clone(): Rental {\n    const rental = new Rental();\n    return copy(this, rental);\n  }\n}\n\nexport class Data {\n  housing: Housing = new Housing();\n  investment = new Investment();\n  taxes = new Tax();\n  inflation = new HousingNumber(0.02, \"yearly\");\n\n  clone() {\n    const data = new Data();\n    return copy(this, data);\n  }\n}\n\nexport class State {\n  data = new Data();\n  netWorth = 0;\n\n  clone() {\n    const state = new State();\n    return copy(this, state);\n  }\n}\n\nexport type CalculateFn = (state: State, month: number) => State;\n\nexport function log(fn: CalculateFn): CalculateFn {\n  return (state: State, month: number): State => {\n    const space = 4;\n    console.debug(\"Old State\");\n    console.debug(JSON.stringify(state, null, space));\n    state = fn(state, month);\n    console.debug(\"New State\");\n    console.debug(JSON.stringify(state, null, space));\n    return state;\n  }\n}\n\nfunction assert(condition: boolean, message?: string) {\n  if (!condition) {\n    throw new Error(\"Abort assertion failed\" + message ? \": \" + message : '');\n  }\n}\n\nfunction expect(condition: boolean, message?: string) {\n  if (!condition) {\n    console.warn(\"Condition not met\" + message ? \": \" + message : '');\n  }\n}\n\n/*\n   'base' is how much you spend the first year\n   'base' + 'base' * 'rate' is how much you spend the next year\n   etc. \n\n   exponentialSum computes the total amount of money you spent over a specified amount of 'years'\n*/\nexport function exponentialSum(base: GrowableNumber, years: number): number {\n  expect(base.rate.yearly() >= 0 && base.rate.yearly() <= 1, \"rate is not between 0 and 1\");\n  assert(base.start >= 0, \"base is negative\");\n  assert(years >= 0, \"years is negative\");\n\n  let total = base.start;\n  let year = 1;\n\n  for (const current of base.generator(\"yearly\")) {\n    if (year >= years) {\n      break;\n    }\n\n    total += current;\n    year += 1;\n  }\n\n  return total;\n};\n\nexport const increaseByRate = (rate: number) => (amount: number) => (1 + rate) * amount;\n\nfunction chainCalculations(...fns: CalculateFn[]): CalculateFn {\n  return (state: State, month: number): State => {\n    for (const fn of fns) {\n      state = fn(state, month)\n    }\n\n    return state;\n  }\n}\n\nexport function calculateMonth(): CalculateFn {\n  return chainCalculations(\n    reccuringInvestment(),\n    housingExpenses(),\n  )\n}\n\nexport function postCalculateMonth(): CalculateFn {\n  return chainCalculations(/* TODO: Add calculation steps */);\n}\n\nexport function* calculate(data: Data, months: number): Generator<State> {\n  let state = new State();\n  state.data = data.clone();\n\n  const fn = calculateMonth();\n  const postFn = postCalculateMonth();\n\n  for (let month = 1; month <= months; month++) {\n    state = fn(state, month);\n    yield postFn(state, month);\n  }\n}\n\nexport function principleAfterInterest(principle: number, rate: number): number {\n  expect(rate >= 0 && rate <= 1, \"rate is not between 0 and 1\");\n  return principle * (1 + rate);\n}\n\nexport function reccuringInvestment(): CalculateFn {\n  return (state: State, _: number): State => {\n    const data = state.data;\n    const contribution = data.investment.contribution;\n    const rate = data.investment.principle.rate;\n    const principle = data.investment.principle.start;\n    assert(principle >= 0, \"base is negative\");\n\n    const newPrinciple = principleAfterInterest(principle, rate.monthly()) + contribution.monthly();\n    const newState = state.clone();\n    newState.data.investment.principle.start = newPrinciple;\n    newState.netWorth += newPrinciple - principle;\n\n    return newState;\n  };\n};\n\nexport function housingExpenses(): CalculateFn {\n  return (state: State, month: number): State => {\n    const housing = state.data.housing;\n    let fn: CalculateFn | null;\n\n    const rentIncome = housing.chargeForRoom.monthly() * housing.extraBedrooms;\n    state.netWorth +=\n      rentIncome\n      - housing.insurance.monthly()\n      - housing.utilityCost.monthly();\n\n    if (month % 12 === 0) {\n      const increaseByInflation = increaseByRate(state.data.inflation.yearly());\n\n      housing.chargeForRoom.update(\"monthly\", increaseByRate(housing.chargeForRoomIncrease.yearly()));\n      housing.insurance.update(\"monthly\", increaseByInflation);\n      housing.utilityCost.update(\"monthly\", increaseByInflation);\n    }\n\n    switch (housing.plan) {\n      case \"house\":\n        fn = houseExpenses(housing.house);\n        break;\n      case \"rental\":\n        fn = rentalExpenses(housing.rental);\n        break;\n      default:\n        throw new Error(\"Unsupported plan\");\n    }\n\n    return fn(state, month);\n  }\n}\n\nfunction houseExpenses(house: House): CalculateFn {\n  return (state: State, month: number): State => {\n    const expense =\n      - loanPayment(house.loan).monthly()\n      - house.repairCost.monthly()\n      - house.hoaFee.monthly()\n\n    const newState = state.clone();\n    newState.netWorth += expense;\n\n    const newHouse = newState.data.housing.house;\n    newHouse.housePrice = principleAfterInterest(newHouse.housePrice, newHouse.growthRate.monthly());\n\n    if (month % 12 === 0) {\n      const increaseByInflation = increaseByRate(newState.data.inflation.yearly());\n\n      newHouse.repairCost.update(\"monthly\", increaseByInflation);\n      newHouse.hoaFee.update(\"monthly\", increaseByInflation);\n    }\n\n    return newState;\n  }\n}\n\nfunction rentalExpenses(rental: Rental): CalculateFn {\n  return (state: State, month: number): State => {\n    const newState = state.clone();\n    newState.netWorth -= rental.payment.monthly();\n\n    if (month % 12 === 0) {\n      const newRental = newState.data.housing.rental;\n      newRental.payment.update(\"monthly\", increaseByRate(rental.paymentIncrease.yearly()));\n    }\n\n    return newState;\n  }\n}\n\nexport function loanPayment(loan: Loan) {\n  const numPayments = 12 * loan.term;\n  const rate = loan.principle.rate.monthly()\n  const top = rate * Math.pow(1 + rate, numPayments)\n  const bottom = Math.pow(1 + rate, numPayments) - 1\n  return new HousingNumber(loan.principle.start * top / bottom, \"monthly\")\n}\n\nexport function round(n: number) {\n  return +n.toFixed(2)\n}\n\nexport function loanPrinciple(loan: Loan, years: number) {\n  let loanAmount = loan.principle.start;\n  const months = years * 12;\n  const payment = loanPayment(loan).monthly()\n  for (let month = 0; month < months; month++) {\n    const interest = round(loanAmount * loan.principle.rate.monthly())\n    const principle = payment - interest\n    loanAmount -= principle;\n    if (loanAmount < 0) {loanAmount = 0; month = months;}\n  }\n  return Math.round(loanAmount);\n}\n","import React from 'react';\nimport {\n  InputLabel,\n  Select,\n  MenuItem,\n  FormControl,\n  FormHelperText,\n  TextField,\n  InputAdornment,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle\n} from '@material-ui/core';\nimport {Data, House, Plan, Rental} from '../api/math';\nimport {buildTransformers} from '../api/transformer';\nimport {HousingNumber, Period} from '../api/number';\nimport {copy} from '../api/copy';\n\nexport interface InputDialogProps {\n  initialData: InputDialogData;\n  open: boolean;\n  onClose: () => void;\n  onSubmit: (data: InputDialogData) => void\n};\n\nexport type SupportedTypes = String | Number | HousingNumber;\nexport type DataFormField<T> = {\n  rank: number,\n  label: string,\n  helper: string,\n  inputType: \"number\" | \"email\" | \"password\" | \"text\",\n  validate?: (value: T) => boolean,\n  period?: Period,\n  startAdornment?: string,\n  endAdornment?: string\n};\nexport type DataForm<T> = {\n  [key in keyof T]?: T[key] extends SupportedTypes ? DataFormField<T[key]> : DataForm<T[key]>\n};\n\nfunction generateForm<T>(form: DataForm<T>, data: T, onChange: (_: T) => void): JSX.Element {\n  const formFields: [JSX.Element, number][] = [];\n\n  function addFormFields<T>(form: DataForm<T>, data: T, onChange: (_: T) => void) {\n    (Object.keys(data) as Array<keyof T>)\n      .filter(key => typeof data[key] !== 'function')\n      .filter(key => form[key])\n      .forEach(key => {\n        const value = data[key];\n        if (typeof value === \"string\"\n          || value instanceof String\n          || typeof value === \"number\"\n          || value instanceof Number\n          || value instanceof HousingNumber) {\n          const field = form[key] as DataFormField<T[keyof T]>;\n          const transformer = buildTransformers(data, onChange);\n          const period = field.period;\n          if (value instanceof HousingNumber) {\n            if (!period) {\n              throw new Error(`${key} is a housing number. \"period\" is required`);\n            }\n          }\n\n          formFields.push([\n            (<React.Fragment>\n              <FormControl variant=\"filled\">\n                <TextField\n                  label={field.label}\n                  type={field.inputType}\n                  value={value instanceof HousingNumber ? value.to(period!) : value}\n                  onChange={transformer[value.constructor.name](key, field.period)}\n                  InputProps={{\n                    startAdornment: field.startAdornment && <InputAdornment position=\"start\">{field.startAdornment}</InputAdornment>,\n                    endAdornment: field.endAdornment && <InputAdornment position=\"end\">{field.endAdornment}</InputAdornment>,\n                  }}\n                />\n                <FormHelperText>{field.helper}</FormHelperText>\n              </FormControl>\n              <br />\n            </React.Fragment>),\n            field.rank\n          ]);\n          return;\n        }\n\n        addFormFields<T[keyof T]>(form[key] as DataForm<T[keyof T]>, data[key], (obj) => {\n          data[key] = obj;\n          onChange(data);\n        })\n      })\n  }\n\n  addFormFields(form, data, onChange);\n\n  return (\n    <div>\n      {formFields.sort((a, b) => a[1] - b[1]).map(e => e[0])}\n    </div>\n  )\n}\n\nexport class InputDialogData extends Data {\n  label = \"\";\n\n  clone() {\n    const data = new InputDialogData();\n    return copy(this, data);\n  }\n};\n\nfunction generateFormTemplate(plan: Plan): DataForm<InputDialogData> {\n  const base: DataForm<InputDialogData> = {\n    label: {\n      rank: 1,\n      label: \"Label\",\n      helper: \"Logical label for the simulation\",\n      inputType: \"text\",\n    },\n    investment: {\n      principle: {\n        start: {\n          rank: 2,\n          label: \"Investment Principle\",\n          helper: \"How much money do you have currently (we expect you to take your down payment out of this money)\",\n          inputType: \"number\",\n          startAdornment: \"$\"\n        },\n        rate: {\n          rank: 2,\n          label: \"Average Return\",\n          helper: \"What is the annual average rate of return of your portfolio?\",\n          inputType: \"number\",\n          endAdornment: \"%\",\n          period: \"yearly\"\n        }\n      },\n      contribution: {\n        rank: 3,\n        label: \"Monthly Contribution\",\n        helper: \"How much do you contribute to your principle each month?\",\n        inputType: \"number\",\n        startAdornment: \"$\",\n        period: \"monthly\"\n      }\n    },\n    inflation: {\n      rank: 4,\n      label: \"Inflation\",\n      helper: \"How much inflation per year?\",\n      inputType: \"number\",\n      endAdornment: \"%\",\n      period: \"yearly\"\n    },\n    housing: {\n      downPayment: {\n        rank: 5,\n        label: \"Upfront Costs\",\n        helper: \"e.g. move-in fees, non-refundable fees, pizza + beer for your friends who helped you move\",\n        inputType: \"number\",\n        startAdornment: \"$\"\n      },\n      extraBedrooms: {\n        rank: 5,\n        label: \"Spare Rooms\",\n        helper: \"How much you plan to charge for each spare room(s)\",\n        inputType: \"number\"\n      },\n      chargeForRoom: {\n        rank: 5,\n        label: \"Charge per Room\",\n        helper: \"\",\n        inputType: \"number\",\n        period: 'monthly'\n      },\n      chargeForRoomIncrease: {\n        rank: 5,\n        label: \"Charge for room increase per year?\",\n        helper: \"How much you plan to increase the rent for your spare room(s) each year\",\n        inputType: \"number\",\n        endAdornment: \"%\",\n        period: \"yearly\"\n      }\n    }\n  };\n\n  const house: DataForm<House> = {\n    repairCost: {\n      rank: 6,\n      label: \"Annual Repair Cost\",\n      helper: \"How much you expect to spend annually on home repairs\",\n      inputType: \"number\",\n      startAdornment: \"$\",\n      period: \"yearly\"\n    },\n    housePrice: {\n      rank: 6.1,\n      label: \"House Price\",\n      helper: \"How much you expect to pay for the home\",\n      inputType: \"number\",\n      startAdornment: \"$\"\n    },\n    buyClosingCosts: {\n      rank: 6.2,\n      label: \"Buying Closing Costs\",\n      helper: \"How much you expect to pay for closing costs when buying the home(percent)\",\n      inputType: \"number\",\n      endAdornment: \"%\"\n    },\n    sellClosingCosts: {\n      rank: 6.3,\n      label: \"Selling Closing Costs\",\n      helper: \"How much you expect to pay for closing costs when selling the home(percent)\",\n      inputType: \"number\",\n      endAdornment: \"%\"\n    },\n    growthRate: {\n      rank: 6.4,\n      label: \"Home Value Appreciation\",\n      helper: \"How much you expect home value to go up each year\",\n      inputType: \"number\",\n      endAdornment: \"%\",\n      period: \"yearly\"\n    },\n    hoaFee: {\n      rank: 6.5,\n      label: \"HOA Fee\",\n      helper: \"Home Owner's Association Monthly Fee\",\n      inputType: \"number\",\n      startAdornment: \"$\",\n      period: \"monthly\"\n    }\n  };\n\n  const rental: DataForm<Rental> = {\n    payment: {\n      rank: 6.1,\n      label: \"Monthly Rent Payment\",\n      helper: \"How much do you pay rent every month?\",\n      inputType: \"number\",\n      startAdornment: \"$\",\n      period: \"monthly\"\n    },\n    paymentIncrease: {\n      rank: 6.2,\n      label: \"Payment Increase Rate\",\n      helper: \"How much you expect rent to go up annually\",\n      inputType: \"number\",\n      endAdornment: \"%\",\n      period: \"yearly\"\n    }\n  };\n\n  switch (plan) {\n    case \"house\":\n      base.housing!.house = house;\n      break;\n    case \"rental\":\n      base.housing!.rental = rental;\n      break;\n    default:\n      throw new Error(`Unsupported plan: ${plan}`);\n  }\n\n  return base;\n}\n\nexport function InputDialog({initialData, onSubmit, onClose, open}: InputDialogProps) {\n  const [data, setData] = React.useState<InputDialogData>(initialData);\n\n  React.useEffect(() => {\n    setData(initialData);\n  }, [initialData]);\n\n  const template = generateFormTemplate(data.housing.plan);\n  const form = generateForm(template, data, newData => setData(newData.clone()));\n  const handlePlanChange = (event: React.ChangeEvent<{value: unknown}>) => {\n    const value = event.target.value as Plan;\n    data.housing.plan = value;\n    setData(data.clone());\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle id=\"form-dialog-title\">Subscribe</DialogTitle>\n      <DialogContent>\n        <FormControl>\n          <InputLabel id=\"select-housing-type\">Housing Type</InputLabel>\n          <Select\n            labelId=\"select-housing-type\"\n            value={data.housing.plan}\n            onChange={handlePlanChange}\n          >\n            <MenuItem value={'house'}>House</MenuItem>\n            <MenuItem value={'rental'}>Apartment</MenuItem>\n          </Select>\n          <FormHelperText>Select housing type to compare</FormHelperText>\n        </FormControl>\n        {form}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\">\n          Cancel\n          </Button>\n        <Button color=\"primary\" onClick={() => onSubmit(data)}>Submit</Button>\n      </DialogActions>\n    </Dialog >\n  );\n}\n","import {Period, HousingNumber} from \"./number\";\n\nexport function buildTransformers<T>(obj: T, onChange: (_: T) => void) {\n  return {\n    \"HousingNumber\": (prop: keyof T, type: Period) =>\n      (event: React.ChangeEvent<HTMLInputElement>) => {\n        obj[prop] = new HousingNumber(Number(event.target.value), type) as unknown as T[keyof T];\n        onChange(obj);\n      },\n    \"Number\": (prop: keyof T) =>\n      (event: React.ChangeEvent<HTMLInputElement>) => {\n        obj[prop] = Number(event.target.value) as unknown as T[keyof T];\n        onChange(obj);\n      },\n    \"String\": (prop: keyof T) =>\n      (event: React.ChangeEvent<HTMLInputElement>) => {\n        obj[prop] = event.target.value as unknown as T[keyof T];\n        onChange(obj);\n      }\n  };\n}\n\n","import React from 'react';\nimport {ResponsiveLine, Serie} from '@nivo/line';\nimport {InputDialogData} from './InputDialog';\nimport {calculate, State} from '../api/math';\n\nconst DEFAULT_YEARS = 30;\n\nexport type NetWorthTrendlineProps = {\n  data: InputDialogData[],\n  years?: number\n}\n\nfunction transform(data: InputDialogData, years: number): Serie {\n  const months = 12 * years;\n  const it = calculate(data, months)\n  const states: State[] = [];\n\n  for (let month = 1; month <= months; month++) {\n    const result = it.next();\n    if (result.done) {\n      break;\n    }\n\n    if (month % 12 === 0) {\n      states.push(result.value);\n    }\n  }\n\n  const serie: Serie = {\n    id: data.label,\n    data: states.map((state, i) => ({\n      x: i + 1,\n      y: state.netWorth,\n    }))\n  }\n\n  return serie;\n}\n\nexport function NetWorthTrendline({data, years}: NetWorthTrendlineProps) {\n  if (!years) {\n    years = DEFAULT_YEARS;\n  }\n\n  return (\n    <ResponsiveLine\n      data={data.map(datum => transform(datum, years!))}\n      margin={{top: 50, right: 110, bottom: 50, left: 80}}\n      xScale={{type: 'point'}}\n      yScale={{type: 'linear', min: 'auto', max: 'auto', stacked: false, reverse: false}}\n      axisTop={null}\n      axisRight={null}\n      axisBottom={{\n        orient: 'bottom',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'Years',\n        legendOffset: 36,\n        legendPosition: 'middle'\n      }}\n      axisLeft={{\n        orient: 'left',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'Net Worth',\n        legendOffset: -70,\n        legendPosition: 'middle'\n      }}\n      colors={{scheme: 'nivo'}}\n      pointSize={10}\n      pointColor={{theme: 'background'}}\n      pointBorderWidth={2}\n      pointBorderColor={{from: 'serieColor'}}\n      pointLabel=\"y\"\n      pointLabelYOffset={-12}\n      useMesh={true}\n      legends={[\n        {\n          anchor: 'bottom-right',\n          direction: 'column',\n          justify: false,\n          translateX: 100,\n          translateY: 0,\n          itemsSpacing: 0,\n          itemDirection: 'left-to-right',\n          itemWidth: 80,\n          itemHeight: 20,\n          itemOpacity: 0.75,\n          symbolSize: 12,\n          symbolShape: 'circle',\n          symbolBorderColor: 'rgba(0, 0, 0, .5)',\n          effects: [\n            {\n              on: 'hover',\n              style: {\n                itemBackground: 'rgba(0, 0, 0, .03)',\n                itemOpacity: 1\n              }\n            }\n          ]\n        }\n      ]}\n    />);\n}\n","export interface Cloneable<T> {\n  clone(): T;\n}\n\nexport function decodeCSV<T extends Cloneable<T>>(raw: string, model: T): T[] {\n  const csvRows = raw.split('\\n').map(row => row.split(','));\n  const csvHeaders = csvRows[0];\n\n  const csvModel = {} as any;\n  for (let i = 0; i < csvHeaders.length; i++) {\n    const csvHeader = csvHeaders[i];\n    // first dot always represents root, ignoring.\n    const keys = csvHeader.split(\".\").slice(1);\n    let currentNode = csvModel;\n\n\n    for (let j = 0; j < keys.length; j++) {\n      const key = keys[j];\n      if (!(key in currentNode)) {\n        currentNode[key] = j === keys.length - 1 ? i : {};\n      }\n\n      currentNode = currentNode[key];\n    }\n  }\n\n  function fillCSVNode(csvNode: any, cols: string[]) {\n    for (const key in csvNode) {\n      const value = csvNode[key];\n\n      if (typeof value === \"number\") {\n        csvNode[key] = cols[value];\n      } else {\n        fillCSVNode(value, cols);\n      }\n    }\n\n    return csvNode;\n  }\n\n  function fill(node: any, csvNode: any, model: any) {\n    if (!node) {\n      return;\n    }\n\n    for (const key in model) {\n      const value = model[key];\n      let t;\n\n      if (typeof value.fromCSV === \"function\") {\n        node[key] = value.fromCSV(csvNode[key]);\n        continue;\n      }\n\n      switch (t = typeof value) {\n        case \"number\":\n          node[key] = Number(csvNode[key]);\n          break;\n        case \"boolean\":\n          node[key] = Boolean(csvNode[key]);\n          break;\n        case \"string\":\n          node[key] = csvNode[key];\n          break;\n        case \"object\":\n          fill(node[key], csvNode[key], value);\n          break;\n        default:\n          throw Error(`Unsupported type: ${t}`);\n      }\n    }\n  }\n\n  // ignore headers\n  const csvBody = csvRows.slice(1);\n  const rows = [];\n  for (let i = 0; i < csvBody.length; i++) {\n    // deep copy models\n    const row = model.clone();\n    const csvNode = JSON.parse(JSON.stringify(csvModel));\n\n    fillCSVNode(csvNode, csvBody[i]);\n    fill(row, csvNode, model);\n    rows.push(row);\n  }\n\n  return rows;\n}\n\nexport function encodeCSV(rows: any[]): string {\n  const csvRows = [];\n  const keys = {} as any;\n  let keyCount = 0;\n\n  function encode(tree: any): any {\n    const m = {} as any;\n\n    function visit(node: any, prefix: string) {\n      if (!node) {\n        return;\n      }\n\n      for (const key in node) {\n        const newPrefix = `${prefix}.${key}`;\n        const value = node[key];\n        let encodedValue = null;\n\n        if (typeof value.toCSV === \"function\") {\n          encodedValue = value.toCSV();\n        } else if (Array.isArray(value)) {\n          // TODO\n        } else if (typeof value === 'object') {\n          visit(value, newPrefix);\n        } else if (typeof value.toString === \"function\") {\n          encodedValue = value.toString();\n        } else {\n          encodedValue = value;\n        }\n\n        if (encodedValue) {\n          m[newPrefix] = encodedValue;\n\n          if (!(newPrefix in keys)) {\n            keys[newPrefix] = keyCount;\n            keyCount++;\n          }\n        }\n      }\n    }\n\n    visit(tree, \"\");\n    return m;\n  }\n\n  for (const row of rows) {\n    const m = encode(row);\n    const csvCols = new Array(keyCount);\n\n    for (const k in m) {\n      const i = keys[k];\n      csvCols[i] = m[k];\n    }\n\n    csvRows.push(csvCols);\n  }\n\n  return Object.keys(keys).join(\",\") + \"\\n\"\n    + csvRows.map(e => e.join(\",\")).join(\"\\n\");\n}\n","import React from 'react';\nimport {\n  Checkbox,\n  Button,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  IconButton,\n  ButtonGroup,\n} from '@material-ui/core';\nimport {Edit, Delete} from \"@material-ui/icons\";\nimport {InputDialog, InputDialogData} from './components/InputDialog';\nimport {NetWorthTrendline} from './components/NetWorthTrendline';\nimport {encodeCSV, decodeCSV} from './api/csv'\n\nclass Row {\n  selected = true;\n  data: InputDialogData;\n\n  constructor(initialData?: InputDialogData) {\n    if (!initialData) {\n      initialData = new InputDialogData();\n    }\n\n    this.data = initialData;\n  }\n}\n\nfunction App() {\n  const [open, setOpen] = React.useState(false);\n  const [rows, setRows] = React.useState<Row[]>([]);\n  const [index, setIndex] = React.useState(-1);\n  const [initialData, setInitialData] = React.useState<InputDialogData>(new InputDialogData());\n  const selectedData = rows.filter(e => e.selected).map(e => e.data);\n\n  function handleDownloadCSV() {\n    const encodedUri = encodeURI(\"data:text/csv;charset=utf-8,\" + encodeCSV(rows.map(e => e.data)));\n    window.open(encodedUri);\n  }\n\n  async function handleLoadCSV(event: React.ChangeEvent<HTMLInputElement>) {\n    const files = event.target.files;\n    if (!files) {\n      return;\n    }\n\n    const file = files[0];\n    if (!file) {\n      return;\n    }\n\n    const fr = new FileReader();\n    fr.onload = () => {\n      setRows(decodeCSV(fr.result as string, new InputDialogData()).map(e => new Row(e)));\n    }\n    fr.readAsText(file);\n  }\n\n  const handleSubmit = (data: InputDialogData) => {\n    if (index < 0 || index >= rows.length) {\n      setRows([\n        ...rows,\n        new Row(data.clone())\n      ]);\n    } else {\n      rows[index] = new Row(data.clone());\n      setRows([...rows]);\n    }\n    setOpen(false);\n  };\n\n  function handleOpen() {\n    setIndex(-1);\n    setOpen(true);\n  }\n\n  function handleRemove(e: React.ChangeEvent<HTMLInputElement>, i: number) {\n    e.stopPropagation();\n    const left = rows.slice(0, i) || [];\n    const right = rows.slice(i + 1) || [];\n    setRows([...left, ...right]);\n  }\n\n  function handleEdit(e: React.ChangeEvent<HTMLInputElement>, i: number) {\n    e.stopPropagation();\n    setIndex(i);\n    setInitialData(rows[i].data);\n    setOpen(true);\n  }\n\n  function handleSelectAll(checked: boolean) {\n    setRows(rows.map(e => ({...e, selected: checked})));\n  }\n\n  function handleSelect(i: number) {\n    rows[i].selected = !rows[i].selected;\n    setRows([...rows]);\n  }\n\n  return (\n    <div>\n      <div style={{height: '40vh', width: '100%'}}>\n        <NetWorthTrendline data={selectedData}></NetWorthTrendline>\n      </div>\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell padding=\"checkbox\">\n                <Checkbox\n                  checked={selectedData.length > 0 && selectedData.length === rows.length}\n                  onChange={e => handleSelectAll(e.target.checked)}\n                  inputProps={{'aria-label': 'select all desserts'}}\n                />\n              </TableCell>\n              <TableCell align=\"center\">Label</TableCell>\n              <TableCell align=\"center\">Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row, i) => (\n              <TableRow\n                key={i}\n                hover\n                onClick={() => handleSelect(i)}\n                role=\"checkbox\"\n                aria-checked={row.selected}\n                tabIndex={-1}\n                selected={row.selected}\n              >\n                <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    checked={row.selected}\n                  />\n                </TableCell>\n                <TableCell align=\"center\">{row.data.label}</TableCell>\n                <TableCell align=\"center\">\n                  <ButtonGroup variant=\"text\" color=\"primary\" aria-label=\"text primary button group\">\n                    <IconButton id=\"action-edit\" color=\"primary\" aria-label=\"Edit\" component=\"span\" onClick={(e: any) => handleEdit(e, i)}>\n                      <Edit />\n                    </IconButton>\n                    <IconButton color=\"primary\" aria-label=\"Remove\" component=\"span\" onClick={(e: any) => handleRemove(e, i)}>\n                      <Delete />\n                    </IconButton>\n                  </ButtonGroup>\n\n                </TableCell>\n              </TableRow>)\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <InputDialog initialData={initialData} open={open} onClose={() => setOpen(false)} onSubmit={handleSubmit} />\n      <Button onClick={handleOpen}>Add</Button>\n      <Button onClick={handleDownloadCSV}>Download as CSV</Button>\n      <input\n        accept=\"text/csv\"\n        id=\"contained-button-file\"\n        type=\"file\"\n        onChange={handleLoadCSV}\n      />\n      <label htmlFor=\"contained-button-file\">\n        <Button variant=\"contained\" color=\"primary\" component=\"span\">\n          Load CSV\n        </Button>\n      </label>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.tsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}