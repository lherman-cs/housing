{"version":3,"sources":["api/number.ts","api/copy.ts","api/math.ts","components/InputDialog.tsx","api/transformer.ts","components/NetWorthTrendline.tsx","api/csv.ts","App.tsx","serviceWorker.js","index.js"],"names":["HousingNumber","amount","period","raw","Error","acceptedPeriods","Number","includes","join","this","monthly","yearly","fn","to","growableNumberCallbackNoop","n","GrowableNumber","rate","onBefore","onAfter","update","_","clone","copy","src","dst","k","v","calculateDefault","calculate","Investment","principle","contribution","totalGain","Tax","property","householdIncome","capitalGainsRate","filingStatus","marginalIncomeTaxRate","Loan","term","Housing","plan","downPayment","chargeForRoom","chargeForRoomIncrease","extraBedrooms","utilityCost","insurance","house","House","rental","Rental","repairCost","housePrice","growthRate","hoaFee","loan","buyClosingCosts","sellClosingCosts","paymentIncrease","payment","Data","housing","investment","taxes","inflation","State","data","netWorth","log","label","buff","oldState","month","newState","push","logDiff","prefixes","key","pop","console","debug","length","assert","condition","message","expect","warn","increaseByRate","chainCalculations","fns","state","calculateMonth","initialState","newPrinciple","principleAfterInterest","rentIncome","increaseByInflation","expense","loanPayment","newHouse","interest","loanPaymentAmount","loanAmount","interestPaid","loanIntrest","taxCredits","postCalculateMonth","initialHousePrice","loanPrinciple","closingCosts","sellExpenses","gain","limit","sellHouse","initialData","months","ongoing","post","callbacks","ongoingFn","postFn","numPayments","top","Math","pow","bottom","generateForm","form","onChange","formFields","addFormFields","Object","keys","filter","forEach","value","String","field","transformer","obj","prop","type","event","target","buildTransformers","Fragment","FormControl","variant","TextField","inputType","constructor","name","InputProps","startAdornment","InputAdornment","position","endAdornment","FormHelperText","helper","rank","sort","a","b","map","e","InputDialogData","InputDialog","onSubmit","onClose","open","React","useState","setData","useEffect","base","generateFormTemplate","newData","Dialog","aria-labelledby","DialogTitle","id","DialogContent","InputLabel","Select","labelId","MenuItem","DialogActions","Button","onClick","color","NetWorthTrendline","years","datum","it","states","result","next","done","i","x","y","transform","margin","right","left","xScale","yScale","min","max","stacked","reverse","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","colors","scheme","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabel","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","decodeCSV","model","csvRows","split","row","csvHeaders","csvModel","slice","currentNode","j","fillCSVNode","csvNode","cols","fill","node","t","fromCSV","Boolean","csvBody","rows","JSON","parse","stringify","Row","selected","App","setOpen","setRows","index","setIndex","setInitialData","selectedData","files","file","fr","FileReader","onload","readAsText","height","width","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","padding","Checkbox","checked","inputProps","align","TableBody","hover","handleSelect","role","aria-checked","tabIndex","ButtonGroup","aria-label","IconButton","stopPropagation","handleEdit","Edit","handleRemove","Delete","encodedUri","encodeURI","keyCount","encode","tree","m","visit","prefix","newPrefix","encodedValue","toCSV","Array","isArray","toString","csvCols","encodeCSV","window","accept","htmlFor","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c8c8a500.chunk.js","sourcesContent":["export type Period = 'monthly' | 'yearly'\n\nexport class HousingNumber {\n  constructor(public amount: number, public period: Period) {}\n\n  fromCSV(raw: any): HousingNumber {\n    if (!(\"amount\" in raw && \"period\" in raw)) {\n      throw Error(\"Parse error: amount and period have to exist\");\n    }\n\n    const acceptedPeriods = [\"yearly\", \"monthly\"];\n    let period: Period = \"yearly\";\n    const amount = Number(raw[\"amount\"]);\n    if (acceptedPeriods.includes(raw[\"period\"])) {\n      period = raw[\"period\"] as Period;\n    } else {\n      throw Error(`Parse error: period should be one of [${acceptedPeriods.join(\", \")}], but got ${raw[\"period\"]}`);\n    }\n\n    return new HousingNumber(amount, period);\n  }\n\n  to(period: Period): number {\n    switch (period) {\n      case \"monthly\":\n        return this.monthly();\n      case \"yearly\":\n        return this.yearly();\n    }\n  }\n\n  monthly(): number {\n    let amount = this.amount;\n    if (this.period === \"yearly\") {\n      amount /= 12;\n    }\n\n    return amount;\n  }\n\n  yearly(): number {\n    let amount = this.amount;\n    if (this.period === \"monthly\") {\n      amount *= 12;\n    }\n\n    return amount;\n  }\n\n  update(period: Period, fn: (amount: number) => number) {\n    const amount = this.to(period);\n    this.amount = fn(amount);\n    this.period = period;\n  }\n\n  clone(): HousingNumber {\n    return new HousingNumber(this.amount, this.period);\n  }\n}\n\ntype GrowableNumberCallback = (_: number) => number;\nconst growableNumberCallbackNoop: GrowableNumberCallback = (n: number): number => {\n  return n;\n}\n\nexport class GrowableNumber {\n  constructor(public amount: number, public rate: HousingNumber) {}\n\n  *generator(period: Period, onBefore = growableNumberCallbackNoop, onAfter = growableNumberCallbackNoop): Generator<number> {\n    let amount = this.amount;\n\n    while (true) {\n      amount = onBefore(amount);\n      amount *= (1 + this.rate.to(period));\n      amount = onAfter(amount);\n      yield amount;\n    }\n  }\n\n  update(amount: number, rate: number, period: Period) {\n    this.amount = amount;\n    this.rate.update(period, _ => rate);\n  }\n\n  clone(): GrowableNumber {\n    return new GrowableNumber(this.amount, this.rate.clone());\n  }\n}\n","export function copy<T extends any>(src: T, dst: T) {\n  for (const k in src) {\n    const v = src[k] as any;\n\n    if (v && typeof v.clone === \"function\") {\n      dst[k] = v.clone();\n    } else {\n      dst[k] = v;\n    }\n  }\n\n  return dst;\n}\n","import {HousingNumber, GrowableNumber} from \"./number\";\nimport {copy} from \"./copy\";\n\nexport type Plan = 'house' | 'rental'\nexport type TaxFilingStatus = 'individual' | 'joint'\n\nexport class Investment {\n  principle = new GrowableNumber(100000, new HousingNumber(0.06, \"yearly\"));\n  contribution = new HousingNumber(18000, \"monthly\");\n  totalGain = 0;\n\n  clone() {\n    const investment = new Investment();\n    return copy(this, investment);\n  }\n}\n\nexport class Tax {\n  property = new HousingNumber(0.01, \"yearly\");\n  householdIncome = new HousingNumber(220000, \"yearly\");\n  capitalGainsRate = .15;\n  filingStatus: TaxFilingStatus = \"joint\";\n  marginalIncomeTaxRate = .24;\n\n  clone(): Tax {\n    const tax = new Tax();\n    return copy(this, tax);\n  }\n}\n\nexport class Loan {\n  term = 30;\n  principle = new GrowableNumber(200000, new HousingNumber(0.03, \"yearly\"));\n\n  clone(): Loan {\n    const loan = new Loan();\n    return copy(this, loan);\n  }\n}\n\nexport class Housing {\n  plan: Plan = \"house\";\n  downPayment = 50000;\n  chargeForRoom = new HousingNumber(600, \"monthly\");\n  chargeForRoomIncrease = new HousingNumber(0.03, \"yearly\");\n  extraBedrooms = 0;\n  utilityCost = new HousingNumber(100, \"monthly\");\n  insurance = new HousingNumber(85, \"monthly\");\n  house = new House();\n  rental = new Rental();\n\n  clone(): Housing {\n    const housing = new Housing();\n    return copy(this, housing);\n  }\n}\n\nexport class House {\n  repairCost = new HousingNumber(500, \"yearly\");\n  housePrice = 250000;\n  growthRate = new HousingNumber(0.04, \"yearly\");\n  hoaFee = new HousingNumber(250, \"monthly\");\n  loan = new Loan();\n  buyClosingCosts = .04;\n  sellClosingCosts = .06;\n\n  clone(): House {\n    const house = new House();\n    return copy(this, house);\n  }\n}\n\nexport class Rental {\n  paymentIncrease = new HousingNumber(0.04, \"yearly\");\n  payment = new HousingNumber(900, \"monthly\");\n\n  clone(): Rental {\n    const rental = new Rental();\n    return copy(this, rental);\n  }\n}\n\nexport class Data {\n  housing = new Housing();\n  investment = new Investment();\n  taxes = new Tax();\n  inflation = new HousingNumber(0.02, \"yearly\");\n\n  clone() {\n    const data = new Data();\n    return copy(this, data);\n  }\n}\n\nexport class State {\n  data = new Data();\n  netWorth = 0;\n\n  clone() {\n    const state = new State();\n    return copy(this, state);\n  }\n}\n\nexport type CalculateFn = (state: State, month: number) => State;\n\nexport function log(fn: CalculateFn, label?: string): CalculateFn {\n  const buff: string[] = [];\n  function logDiff(oldState: any, newState: any, prefixes: string[]) {\n    if (typeof newState !== 'object') {\n      if (oldState !== newState) {\n        buff.push(`\\t${prefixes.join(\".\")}: ${oldState} -> ${newState}`);\n      }\n\n      return;\n    }\n\n\n    for (const key in newState) {\n      prefixes.push(key);\n      logDiff(oldState[key], newState[key], prefixes);\n      prefixes.pop();\n    }\n  }\n\n  label = label ? `(${label})` : \"\";\n  return (oldState: State, month: number): State => {\n    const newState = fn(oldState, month);\n    buff.push(`Changes in state on month ${month} ${label}:`);\n    logDiff(oldState, newState, []);\n    console.debug(buff.join(\"\\n\"));\n    buff.length = 0;\n\n    return newState;\n  }\n}\n\nfunction assert(condition: boolean, message?: string) {\n  if (!condition) {\n    throw new Error(\"Abort assertion failed\" + message ? \": \" + message : '');\n  }\n}\n\nfunction expect(condition: boolean, message?: string) {\n  if (!condition) {\n    console.warn(\"Condition not met\" + message ? \": \" + message : '');\n  }\n}\n\n/*\n   'base' is how much you spend the first year\n   'base' + 'base' * 'rate' is how much you spend the next year\n   etc. \n\n   exponentialSum computes the total amount of money you spent over a specified amount of 'years'\n*/\nexport function exponentialSum(base: GrowableNumber, years: number): number {\n  expect(base.rate.yearly() >= 0 && base.rate.yearly() <= 1, \"rate is not between 0 and 1\");\n  assert(base.amount >= 0, \"base is negative\");\n  assert(years >= 0, \"years is negative\");\n\n  let total = base.amount;\n  let year = 1;\n\n  for (const current of base.generator(\"yearly\")) {\n    if (year >= years) {\n      break;\n    }\n\n    total += current;\n    year += 1;\n  }\n\n  return total;\n};\n\nexport const increaseByRate = (rate: number) => (amount: number) => (1 + rate) * amount;\n\nfunction chainCalculations(...fns: CalculateFn[]): CalculateFn {\n  return (state: State, month: number): State => {\n    for (const fn of fns) {\n      state = fn(state, month)\n    }\n\n    return state;\n  }\n}\n\nexport function calculateMonth(initialState: State): CalculateFn {\n  return chainCalculations(\n    reccuringInvestment(),\n    housingExpenses(),\n    taxCredits(initialState),\n  )\n}\n\nexport function postCalculateMonth(initialState: State): CalculateFn {\n  return chainCalculations(sellHouse(initialState), sellInvestment());\n}\n\nexport type Callbacks = {\n  ongoing: (_: State) => CalculateFn,\n  post: (_: State) => CalculateFn\n};\n\nexport function* calculateDefault(initialData: Data, months: number): Generator<State> {\n  const initialState = new State();\n  initialState.data = initialData.clone();\n\n  yield* calculate(initialState, months, {\n    ongoing: calculateMonth,\n    post: postCalculateMonth\n  });\n}\n\nexport function* calculate(state: State, months: number, callbacks: Callbacks): Generator<State> {\n  state = state.clone();\n  const loan = state.data.housing.house.loan;\n  const housing = state.data.housing;\n  const investment = state.data.investment;\n  loan.principle.amount = housing.house.housePrice - housing.downPayment;\n  let closingCosts = 0;\n  if (housing.plan === \"house\") {\n    closingCosts = housing.house.housePrice * housing.house.buyClosingCosts;\n  }\n  investment.principle.amount -= (housing.downPayment + closingCosts);\n  assert(investment.principle.amount > 0, \"Initial investment principle is not enough to cover up down payment\");\n\n  const ongoingFn = log(callbacks.ongoing(state), \"ongoing\");\n  const postFn = log(callbacks.post(state), \"post\");\n\n  for (let month = 1; month <= months; month++) {\n    state = ongoingFn(state, month);\n    yield postFn(state, month);\n  }\n}\n\nexport function principleAfterInterest(principle: number, rate: number): number {\n  expect(rate >= 0 && rate <= 1, \"rate is not between 0 and 1\");\n  return principle * (1 + rate);\n}\n\nexport function reccuringInvestment(): CalculateFn {\n  return (state: State, _: number): State => {\n    const data = state.data;\n    const contribution = data.investment.contribution;\n    const rate = data.investment.principle.rate;\n    const principle = data.investment.principle.amount;\n    assert(principle >= 0, \"base is negative\");\n\n    const newPrinciple = principleAfterInterest(principle, rate.monthly());\n    const newState = state.clone();\n    newState.data.investment.principle.amount = newPrinciple + contribution.monthly();\n    newState.data.investment.totalGain += newPrinciple - principle;\n\n    return newState;\n  };\n};\n\nexport function housingExpenses(): CalculateFn {\n  return (state: State, month: number): State => {\n    const housing = state.data.housing;\n    const investment = state.data.investment;\n    let fn: CalculateFn | null;\n\n    const rentIncome = housing.chargeForRoom.monthly() * housing.extraBedrooms;\n    investment.principle.amount +=\n      rentIncome\n      - housing.insurance.monthly()\n      - housing.utilityCost.monthly();\n    assert(investment.principle.amount > 0, \"Not enough money to cover up housing expenses\");\n\n    if (month % 12 === 0) {\n      const increaseByInflation = increaseByRate(state.data.inflation.yearly());\n\n      housing.chargeForRoom.update(\"monthly\", increaseByRate(housing.chargeForRoomIncrease.yearly()));\n      housing.insurance.update(\"monthly\", increaseByInflation);\n      housing.utilityCost.update(\"monthly\", increaseByInflation);\n    }\n\n    switch (housing.plan) {\n      case \"house\":\n        fn = houseExpenses(housing.house);\n        break;\n      case \"rental\":\n        fn = rentalExpenses(housing.rental);\n        break;\n      default:\n        throw new Error(\"Unsupported plan\");\n    }\n\n    return fn(state, month);\n  }\n}\n\nfunction houseExpenses(house: House): CalculateFn {\n  return (state: State, month: number): State => {\n    const expense =\n      - loanPayment(house.loan).monthly()\n      - house.repairCost.monthly()\n      - house.hoaFee.monthly()\n      - state.data.taxes.property.monthly() * house.housePrice;\n\n    const newState = state.clone();\n    newState.data.investment.principle.amount += expense;\n    assert(newState.data.investment.principle.amount > 0, \"Not enough money to cover up house expenses\");\n\n    const newHouse = newState.data.housing.house;\n    newHouse.housePrice = principleAfterInterest(newHouse.housePrice, newHouse.growthRate.monthly());\n\n    if (month % 12 === 0) {\n      const increaseByInflation = increaseByRate(newState.data.inflation.yearly());\n\n      newHouse.repairCost.update(\"monthly\", increaseByInflation);\n      newHouse.hoaFee.update(\"monthly\", increaseByInflation);\n    }\n\n    return newState;\n  }\n}\n\nfunction rentalExpenses(rental: Rental): CalculateFn {\n  return (state: State, month: number): State => {\n    const newState = state.clone();\n    newState.data.investment.principle.amount -= rental.payment.monthly();\n\n    if (month % 12 === 0) {\n      const newRental = newState.data.housing.rental;\n      newRental.payment.update(\"monthly\", increaseByRate(rental.paymentIncrease.yearly()));\n    }\n\n    return newState;\n  }\n}\n\nexport function sellInvestment(): CalculateFn {\n  return (state: State, _: number): State => {\n    const newState = state.clone();\n    const investment = newState.data.investment;\n    const capitalGainsRate = newState.data.taxes.capitalGainsRate;\n\n    newState.netWorth += investment.totalGain * (1 - capitalGainsRate)\n      + investment.principle.amount - investment.totalGain;\n    return newState;\n  }\n}\n\n/*\n * sellHouse simulates the net gain of selling the house\n * */\nexport function sellHouse(initialState: State): CalculateFn {\n  const initialHousePrice = initialState.data.housing.house.housePrice;\n  return (state: State, _: number): State => {\n    if (state.data.housing.plan !== \"house\") {\n      return state;\n    }\n\n    const newState = state.clone();\n\n    // loan principle is how much is owed on the loan\n    const loanPrinciple = newState.data.housing.house.loan.principle.amount;\n\n    // closing costs, a percent of which comes out of home value\n    const closingCosts = newState.data.housing.house.sellClosingCosts;\n\n    // house price is an estimation of what the house is worth\n    // Note: house price has already been appreciated for the month\n    const housePrice = newState.data.housing.house.housePrice;\n\n    const sellExpenses = housePrice * closingCosts + loanPrinciple;\n    let gain = housePrice - initialHousePrice;\n    const capitalGainsRate = newState.data.taxes.capitalGainsRate;\n    const filingStatus = newState.data.taxes.filingStatus;\n    const limit = filingStatus === 'joint' ? 500000 : 250000;\n\n    // apply capital gains exemption\n    if (gain > limit) {\n      gain = limit + (gain - limit) * (1 - capitalGainsRate);\n    }\n\n    newState.netWorth += (initialHousePrice + gain - sellExpenses);\n\n    return newState;\n  }\n}\n\n/*\n   loanPayment computes and returns the monthly morgage (loan) payment\n*/\nexport function loanPayment(loan: Loan) {\n  const numPayments = 12 * loan.term;\n  const rate = loan.principle.rate.monthly()\n  const top = rate * Math.pow(1 + rate, numPayments)\n  const bottom = Math.pow(1 + rate, numPayments) - 1\n  return new HousingNumber(loan.principle.amount * top / bottom, \"monthly\")\n}\n\nexport function round(n: number) {\n  return +n.toFixed(2)\n}\n\n/*\n   loanPrinciple computes the total amount of principle owed on the loan after\n      a specified number of years\n*/\nexport function loanPrinciple(loan: Loan, years: number) {\n  let loanAmount = loan.principle.amount;\n  const months = years * 12;\n  const payment = loanPayment(loan).monthly()\n  for (let month = 0; month < months; month++) {\n    const interest = loanAmount * loan.principle.rate.monthly()\n    const principle = payment - interest\n    loanAmount -= principle;\n    if (loanAmount < 0) {loanAmount = 0; month = months;}\n  }\n  return loanAmount;\n}\n\n/*\n   loanInterest computes the amount of interest paid in this month\n*/\nexport function loanIntrest(loan: Loan, payment: HousingNumber) {\n  let loanAmount = loan.principle.amount;\n  const interest = loanAmount * loan.principle.rate.monthly();\n  const principle = payment.monthly() - interest;\n  loanAmount -= principle;\n  if (loanAmount < 0) {loanAmount = 0;}\n\n  return {\n    interestPaid: interest,\n    newPrinciple: loanAmount\n  };\n}\n\n/*\n  taxCredits adds tax breaks from newWorth once a year\n  Credits considered are:\n    * Morgage Interest Deduction (consider morgage interest payments as\n       tax deductions)\n    * Property Tax Deductions (consider property tax as a deduction)\n\n  It is assumed that deductions will not affect your tax bracket (even\n    though this is not always the case). For example\n\n    If you paid $4000 in propery tax and you are in the 25% tax bracket, your\n      deduction would be valued at 4000 * .25 = 1000 and the calculator will\n      apply 1000 to netWorth.\n\n  Credits not considered are:\n    * Capital Gains Exemption (assume the owner has lived in the house\n       2 of last 5 years and as such qualifies for the this deduction\n       which means for the first 250k of profit made from sale of home\n       when single and first 500k of profit made from sale of home for\n       joint (married) filers, no capital gains tax is applied)\n*/\nexport function taxCredits(initialState: State): CalculateFn {\n  // Store how much interest has been paid this year in local state\n  let interest = 0;\n  const loanPaymentAmount = loanPayment(initialState.data.housing.house.loan);\n\n  return (state: State, month: number): State => {\n    // Tax credits do not apply to renters\n    if (state.data.housing.plan === 'rental') {\n      return state;\n    }\n\n    const taxes = state.data.taxes;\n    const {interestPaid, newPrinciple} =\n      loanIntrest(state.data.housing.house.loan, loanPaymentAmount);\n\n    // Update interest paid this year\n    interest += interestPaid;\n\n    const newState = state.clone();\n\n    // Update principle owed on loan\n    // assert(newPrinciple < newState.data.housing.house.loan.principle.amount, \"new principle must be lower than before\");\n    newState.data.housing.house.loan.principle.amount = newPrinciple;\n\n    if (month % 12 === 0) {\n      // Morgage Interest Deduction\n      const principle = newState.data.investment.principle;\n      principle.amount += interest * taxes.marginalIncomeTaxRate;\n      interest = 0;\n      // Property Tax Deduction\n      principle.amount += taxes.property.yearly() * taxes.marginalIncomeTaxRate;\n    }\n\n    return newState;\n  }\n}\n","import React from 'react';\nimport {\n  InputLabel,\n  Select,\n  MenuItem,\n  FormControl,\n  FormHelperText,\n  TextField,\n  InputAdornment,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle\n} from '@material-ui/core';\nimport {Data, House, Plan, Rental} from '../api/math';\nimport {buildTransformers} from '../api/transformer';\nimport {HousingNumber, Period} from '../api/number';\nimport {copy} from '../api/copy';\n\nexport interface InputDialogProps {\n  initialData: InputDialogData;\n  open: boolean;\n  onClose: () => void;\n  onSubmit: (data: InputDialogData) => void\n};\n\nexport type SupportedTypes = String | Number | HousingNumber;\nexport type DataFormField<T> = {\n  rank: number,\n  label: string,\n  helper: string,\n  inputType: \"number\" | \"email\" | \"password\" | \"text\",\n  validate?: (value: T) => boolean,\n  period?: Period,\n  startAdornment?: string,\n  endAdornment?: string\n};\nexport type DataForm<T> = {\n  [key in keyof T]?: T[key] extends SupportedTypes ? DataFormField<T[key]> : DataForm<T[key]>\n};\n\nfunction generateForm<T>(form: DataForm<T>, data: T, onChange: (_: T) => void): JSX.Element {\n  const formFields: [JSX.Element, number][] = [];\n\n  function addFormFields<T>(form: DataForm<T>, data: T, onChange: (_: T) => void) {\n    (Object.keys(data) as Array<keyof T>)\n      .filter(key => typeof data[key] !== 'function')\n      .filter(key => form[key])\n      .forEach(key => {\n        const value = data[key];\n        if (typeof value === \"string\"\n          || value instanceof String\n          || typeof value === \"number\"\n          || value instanceof Number\n          || value instanceof HousingNumber) {\n          const field = form[key] as DataFormField<T[keyof T]>;\n          const transformer = buildTransformers(data, onChange);\n          const period = field.period;\n          if (value instanceof HousingNumber) {\n            if (!period) {\n              throw new Error(`${key} is a housing number. \"period\" is required`);\n            }\n          }\n\n          formFields.push([\n            (<React.Fragment>\n              <FormControl variant=\"filled\">\n                <TextField\n                  label={field.label}\n                  type={field.inputType}\n                  value={value instanceof HousingNumber ? value.to(period!) : value}\n                  onChange={transformer[value.constructor.name](key, field.period)}\n                  InputProps={{\n                    startAdornment: field.startAdornment && <InputAdornment position=\"start\">{field.startAdornment}</InputAdornment>,\n                    endAdornment: field.endAdornment && <InputAdornment position=\"end\">{field.endAdornment}</InputAdornment>,\n                  }}\n                />\n                <FormHelperText>{field.helper}</FormHelperText>\n              </FormControl>\n              <br />\n            </React.Fragment>),\n            field.rank\n          ]);\n          return;\n        }\n\n        addFormFields<T[keyof T]>(form[key] as DataForm<T[keyof T]>, data[key], (obj) => {\n          data[key] = obj;\n          onChange(data);\n        })\n      })\n  }\n\n  addFormFields(form, data, onChange);\n\n  return (\n    <div>\n      {formFields.sort((a, b) => a[1] - b[1]).map(e => e[0])}\n    </div>\n  )\n}\n\nexport class InputDialogData extends Data {\n  label = \"\";\n\n  clone() {\n    const data = new InputDialogData();\n    return copy(this, data);\n  }\n};\n\nfunction generateFormTemplate(plan: Plan): DataForm<InputDialogData> {\n  const base: DataForm<InputDialogData> = {\n    label: {\n      rank: 1,\n      label: \"Label\",\n      helper: \"Logical label for the simulation\",\n      inputType: \"text\",\n    },\n    investment: {\n      principle: {\n        amount: {\n          rank: 2,\n          label: \"Investment Principle\",\n          helper: \"How much money do you have currently (we expect you to take your down payment out of this money)\",\n          inputType: \"number\",\n          startAdornment: \"$\"\n        },\n        rate: {\n          rank: 2,\n          label: \"Average Return\",\n          helper: \"What is the annual average rate of return of your portfolio?\",\n          inputType: \"number\",\n          endAdornment: \"%\",\n          period: \"yearly\"\n        }\n      },\n      contribution: {\n        rank: 3,\n        label: \"Monthly Contribution\",\n        helper: \"How much do you contribute to your principle each month?\",\n        inputType: \"number\",\n        startAdornment: \"$\",\n        period: \"monthly\"\n      }\n    },\n    inflation: {\n      rank: 4,\n      label: \"Inflation\",\n      helper: \"How much inflation per year?\",\n      inputType: \"number\",\n      endAdornment: \"%\",\n      period: \"yearly\"\n    },\n    housing: {\n      downPayment: {\n        rank: 5,\n        label: \"Upfront Costs\",\n        helper: \"e.g. move-in fees, non-refundable fees, pizza + beer for your friends who helped you move\",\n        inputType: \"number\",\n        startAdornment: \"$\"\n      },\n      extraBedrooms: {\n        rank: 5,\n        label: \"Spare Rooms\",\n        helper: \"How much you plan to charge for each spare room(s)\",\n        inputType: \"number\"\n      },\n      chargeForRoom: {\n        rank: 5,\n        label: \"Charge per Room\",\n        helper: \"\",\n        inputType: \"number\",\n        period: 'monthly'\n      },\n      chargeForRoomIncrease: {\n        rank: 5,\n        label: \"Charge for room increase per year?\",\n        helper: \"How much you plan to increase the rent for your spare room(s) each year\",\n        inputType: \"number\",\n        endAdornment: \"%\",\n        period: \"yearly\"\n      }\n    }\n  };\n\n  const house: DataForm<House> = {\n    repairCost: {\n      rank: 6,\n      label: \"Annual Repair Cost\",\n      helper: \"How much you expect to spend annually on home repairs\",\n      inputType: \"number\",\n      startAdornment: \"$\",\n      period: \"yearly\"\n    },\n    housePrice: {\n      rank: 6.1,\n      label: \"House Price\",\n      helper: \"How much you expect to pay for the home\",\n      inputType: \"number\",\n      startAdornment: \"$\"\n    },\n    buyClosingCosts: {\n      rank: 6.2,\n      label: \"Buying Closing Costs\",\n      helper: \"How much you expect to pay for closing costs when buying the home(percent)\",\n      inputType: \"number\",\n      endAdornment: \"%\"\n    },\n    sellClosingCosts: {\n      rank: 6.3,\n      label: \"Selling Closing Costs\",\n      helper: \"How much you expect to pay for closing costs when selling the home(percent)\",\n      inputType: \"number\",\n      endAdornment: \"%\"\n    },\n    growthRate: {\n      rank: 6.4,\n      label: \"Home Value Appreciation\",\n      helper: \"How much you expect home value to go up each year\",\n      inputType: \"number\",\n      endAdornment: \"%\",\n      period: \"yearly\"\n    },\n    hoaFee: {\n      rank: 6.5,\n      label: \"HOA Fee\",\n      helper: \"Home Owner's Association Monthly Fee\",\n      inputType: \"number\",\n      startAdornment: \"$\",\n      period: \"monthly\"\n    }\n  };\n\n  const rental: DataForm<Rental> = {\n    payment: {\n      rank: 6.1,\n      label: \"Monthly Rent Payment\",\n      helper: \"How much do you pay rent every month?\",\n      inputType: \"number\",\n      startAdornment: \"$\",\n      period: \"monthly\"\n    },\n    paymentIncrease: {\n      rank: 6.2,\n      label: \"Payment Increase Rate\",\n      helper: \"How much you expect rent to go up annually\",\n      inputType: \"number\",\n      endAdornment: \"%\",\n      period: \"yearly\"\n    }\n  };\n\n  switch (plan) {\n    case \"house\":\n      base.housing!.house = house;\n      break;\n    case \"rental\":\n      base.housing!.rental = rental;\n      break;\n    default:\n      throw new Error(`Unsupported plan: ${plan}`);\n  }\n\n  return base;\n}\n\nexport function InputDialog({initialData, onSubmit, onClose, open}: InputDialogProps) {\n  const [data, setData] = React.useState<InputDialogData>(initialData);\n\n  React.useEffect(() => {\n    setData(initialData);\n  }, [initialData]);\n\n  const template = generateFormTemplate(data.housing.plan);\n  const form = generateForm(template, data, newData => setData(newData.clone()));\n  const handlePlanChange = (event: React.ChangeEvent<{value: unknown}>) => {\n    const value = event.target.value as Plan;\n    data.housing.plan = value;\n    setData(data.clone());\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle id=\"form-dialog-title\">Subscribe</DialogTitle>\n      <DialogContent>\n        <FormControl>\n          <InputLabel id=\"select-housing-type\">Housing Type</InputLabel>\n          <Select\n            labelId=\"select-housing-type\"\n            value={data.housing.plan}\n            onChange={handlePlanChange}\n          >\n            <MenuItem value={'house'}>House</MenuItem>\n            <MenuItem value={'rental'}>Apartment</MenuItem>\n          </Select>\n          <FormHelperText>Select housing type to compare</FormHelperText>\n        </FormControl>\n        {form}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\">\n          Cancel\n          </Button>\n        <Button color=\"primary\" onClick={() => onSubmit(data)}>Submit</Button>\n      </DialogActions>\n    </Dialog >\n  );\n}\n","import {Period, HousingNumber} from \"./number\";\n\nexport function buildTransformers<T>(obj: T, onChange: (_: T) => void) {\n  return {\n    \"HousingNumber\": (prop: keyof T, type: Period) =>\n      (event: React.ChangeEvent<HTMLInputElement>) => {\n        obj[prop] = new HousingNumber(Number(event.target.value), type) as unknown as T[keyof T];\n        onChange(obj);\n      },\n    \"Number\": (prop: keyof T) =>\n      (event: React.ChangeEvent<HTMLInputElement>) => {\n        obj[prop] = Number(event.target.value) as unknown as T[keyof T];\n        onChange(obj);\n      },\n    \"String\": (prop: keyof T) =>\n      (event: React.ChangeEvent<HTMLInputElement>) => {\n        obj[prop] = event.target.value as unknown as T[keyof T];\n        onChange(obj);\n      }\n  };\n}\n\n","import React from 'react';\nimport {ResponsiveLine, Serie} from '@nivo/line';\nimport {InputDialogData} from './InputDialog';\nimport {State, calculateDefault} from '../api/math';\n\nconst DEFAULT_YEARS = 30;\n\nexport type NetWorthTrendlineProps = {\n  data: InputDialogData[],\n  years?: number\n}\n\nfunction transform(data: InputDialogData, years: number): Serie {\n  const months = 12 * years;\n  const it = calculateDefault(data, months)\n  const states: State[] = [];\n\n  for (let month = 1; month <= months; month++) {\n    const result = it.next();\n    if (result.done) {\n      break;\n    }\n\n    if (month % 12 === 0) {\n      states.push(result.value);\n    }\n  }\n\n  const serie: Serie = {\n    id: data.label,\n    data: states.map((state, i) => ({\n      x: i + 1,\n      y: state.netWorth,\n    }))\n  }\n\n  return serie;\n}\n\nexport function NetWorthTrendline({data, years}: NetWorthTrendlineProps) {\n  if (!years) {\n    years = DEFAULT_YEARS;\n  }\n\n  return (\n    <ResponsiveLine\n      data={data.map(datum => transform(datum, years!))}\n      margin={{top: 50, right: 110, bottom: 50, left: 80}}\n      xScale={{type: 'point'}}\n      yScale={{type: 'linear', min: 'auto', max: 'auto', stacked: false, reverse: false}}\n      axisTop={null}\n      axisRight={null}\n      axisBottom={{\n        orient: 'bottom',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'Years',\n        legendOffset: 36,\n        legendPosition: 'middle'\n      }}\n      axisLeft={{\n        orient: 'left',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'Net Worth',\n        legendOffset: -70,\n        legendPosition: 'middle'\n      }}\n      colors={{scheme: 'nivo'}}\n      pointSize={10}\n      pointColor={{theme: 'background'}}\n      pointBorderWidth={2}\n      pointBorderColor={{from: 'serieColor'}}\n      pointLabel=\"y\"\n      pointLabelYOffset={-12}\n      useMesh={true}\n      legends={[\n        {\n          anchor: 'bottom-right',\n          direction: 'column',\n          justify: false,\n          translateX: 100,\n          translateY: 0,\n          itemsSpacing: 0,\n          itemDirection: 'left-to-right',\n          itemWidth: 80,\n          itemHeight: 20,\n          itemOpacity: 0.75,\n          symbolSize: 12,\n          symbolShape: 'circle',\n          symbolBorderColor: 'rgba(0, 0, 0, .5)',\n          effects: [\n            {\n              on: 'hover',\n              style: {\n                itemBackground: 'rgba(0, 0, 0, .03)',\n                itemOpacity: 1\n              }\n            }\n          ]\n        }\n      ]}\n    />);\n}\n","export interface Cloneable<T> {\n  clone(): T;\n}\n\nexport function decodeCSV<T extends Cloneable<T>>(raw: string, model: T): T[] {\n  const csvRows = raw.split('\\n').map(row => row.split(','));\n  const csvHeaders = csvRows[0];\n\n  const csvModel = {} as any;\n  for (let i = 0; i < csvHeaders.length; i++) {\n    const csvHeader = csvHeaders[i];\n    // first dot always represents root, ignoring.\n    const keys = csvHeader.split(\".\").slice(1);\n    let currentNode = csvModel;\n\n\n    for (let j = 0; j < keys.length; j++) {\n      const key = keys[j];\n      if (!(key in currentNode)) {\n        currentNode[key] = j === keys.length - 1 ? i : {};\n      }\n\n      currentNode = currentNode[key];\n    }\n  }\n\n  function fillCSVNode(csvNode: any, cols: string[]) {\n    for (const key in csvNode) {\n      const value = csvNode[key];\n\n      if (typeof value === \"number\") {\n        csvNode[key] = cols[value];\n      } else {\n        fillCSVNode(value, cols);\n      }\n    }\n\n    return csvNode;\n  }\n\n  function fill(node: any, csvNode: any, model: any) {\n    if (!node) {\n      return;\n    }\n\n    for (const key in model) {\n      const value = model[key];\n      let t;\n\n      if (typeof value.fromCSV === \"function\") {\n        node[key] = value.fromCSV(csvNode[key]);\n        continue;\n      }\n\n      switch (t = typeof value) {\n        case \"number\":\n          node[key] = Number(csvNode[key]);\n          break;\n        case \"boolean\":\n          node[key] = Boolean(csvNode[key]);\n          break;\n        case \"string\":\n          node[key] = csvNode[key];\n          break;\n        case \"object\":\n          fill(node[key], csvNode[key], value);\n          break;\n        default:\n          throw Error(`Unsupported type: ${t}`);\n      }\n    }\n  }\n\n  // ignore headers\n  const csvBody = csvRows.slice(1);\n  const rows = [];\n  for (let i = 0; i < csvBody.length; i++) {\n    // deep copy models\n    const row = model.clone();\n    const csvNode = JSON.parse(JSON.stringify(csvModel));\n\n    fillCSVNode(csvNode, csvBody[i]);\n    fill(row, csvNode, model);\n    rows.push(row);\n  }\n\n  return rows;\n}\n\nexport function encodeCSV(rows: any[]): string {\n  const csvRows = [];\n  const keys = {} as any;\n  let keyCount = 0;\n\n  function encode(tree: any): any {\n    const m = {} as any;\n\n    function visit(node: any, prefix: string) {\n      if (!node) {\n        return;\n      }\n\n      for (const key in node) {\n        const newPrefix = `${prefix}.${key}`;\n        const value = node[key];\n        let encodedValue = null;\n\n        if (typeof value.toCSV === \"function\") {\n          encodedValue = value.toCSV();\n        } else if (Array.isArray(value)) {\n          // TODO\n        } else if (typeof value === 'object') {\n          visit(value, newPrefix);\n        } else if (typeof value.toString === \"function\") {\n          encodedValue = value.toString();\n        } else {\n          encodedValue = value;\n        }\n\n        if (encodedValue) {\n          m[newPrefix] = encodedValue;\n\n          if (!(newPrefix in keys)) {\n            keys[newPrefix] = keyCount;\n            keyCount++;\n          }\n        }\n      }\n    }\n\n    visit(tree, \"\");\n    return m;\n  }\n\n  for (const row of rows) {\n    const m = encode(row);\n    const csvCols = new Array(keyCount);\n\n    for (const k in m) {\n      const i = keys[k];\n      csvCols[i] = m[k];\n    }\n\n    csvRows.push(csvCols);\n  }\n\n  return Object.keys(keys).join(\",\") + \"\\n\"\n    + csvRows.map(e => e.join(\",\")).join(\"\\n\");\n}\n","import React from 'react';\nimport {\n  Checkbox,\n  Button,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  IconButton,\n  ButtonGroup,\n} from '@material-ui/core';\nimport {Edit, Delete} from \"@material-ui/icons\";\nimport {InputDialog, InputDialogData} from './components/InputDialog';\nimport {NetWorthTrendline} from './components/NetWorthTrendline';\nimport {encodeCSV, decodeCSV} from './api/csv'\n\nclass Row {\n  selected = true;\n  data: InputDialogData;\n\n  constructor(initialData?: InputDialogData) {\n    if (!initialData) {\n      initialData = new InputDialogData();\n    }\n\n    this.data = initialData;\n  }\n}\n\nfunction App() {\n  const [open, setOpen] = React.useState(false);\n  const [rows, setRows] = React.useState<Row[]>([]);\n  const [index, setIndex] = React.useState(-1);\n  const [initialData, setInitialData] = React.useState<InputDialogData>(new InputDialogData());\n  const selectedData = rows.filter(e => e.selected).map(e => e.data);\n\n  function handleDownloadCSV() {\n    const encodedUri = encodeURI(\"data:text/csv;charset=utf-8,\" + encodeCSV(rows.map(e => e.data)));\n    window.open(encodedUri);\n  }\n\n  async function handleLoadCSV(event: React.ChangeEvent<HTMLInputElement>) {\n    const files = event.target.files;\n    if (!files) {\n      return;\n    }\n\n    const file = files[0];\n    if (!file) {\n      return;\n    }\n\n    const fr = new FileReader();\n    fr.onload = () => {\n      setRows(decodeCSV(fr.result as string, new InputDialogData()).map(e => new Row(e)));\n    }\n    fr.readAsText(file);\n  }\n\n  const handleSubmit = (data: InputDialogData) => {\n    if (index < 0 || index >= rows.length) {\n      setRows([\n        ...rows,\n        new Row(data.clone())\n      ]);\n    } else {\n      rows[index] = new Row(data.clone());\n      setRows([...rows]);\n    }\n    setOpen(false);\n  };\n\n  function handleOpen() {\n    setIndex(-1);\n    setOpen(true);\n  }\n\n  function handleRemove(e: React.ChangeEvent<HTMLInputElement>, i: number) {\n    e.stopPropagation();\n    const left = rows.slice(0, i) || [];\n    const right = rows.slice(i + 1) || [];\n    setRows([...left, ...right]);\n  }\n\n  function handleEdit(e: React.ChangeEvent<HTMLInputElement>, i: number) {\n    e.stopPropagation();\n    setIndex(i);\n    setInitialData(rows[i].data);\n    setOpen(true);\n  }\n\n  function handleSelectAll(checked: boolean) {\n    setRows(rows.map(e => ({...e, selected: checked})));\n  }\n\n  function handleSelect(i: number) {\n    rows[i].selected = !rows[i].selected;\n    setRows([...rows]);\n  }\n\n  return (\n    <div>\n      <div style={{height: '40vh', width: '100%'}}>\n        <NetWorthTrendline data={selectedData} years={50}></NetWorthTrendline>\n      </div>\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell padding=\"checkbox\">\n                <Checkbox\n                  checked={selectedData.length > 0 && selectedData.length === rows.length}\n                  onChange={e => handleSelectAll(e.target.checked)}\n                  inputProps={{'aria-label': 'select all desserts'}}\n                />\n              </TableCell>\n              <TableCell align=\"center\">Label</TableCell>\n              <TableCell align=\"center\">Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row, i) => (\n              <TableRow\n                key={i}\n                hover\n                onClick={() => handleSelect(i)}\n                role=\"checkbox\"\n                aria-checked={row.selected}\n                tabIndex={-1}\n                selected={row.selected}\n              >\n                <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    checked={row.selected}\n                  />\n                </TableCell>\n                <TableCell align=\"center\">{row.data.label}</TableCell>\n                <TableCell align=\"center\">\n                  <ButtonGroup variant=\"text\" color=\"primary\" aria-label=\"text primary button group\">\n                    <IconButton id=\"action-edit\" color=\"primary\" aria-label=\"Edit\" component=\"span\" onClick={(e: any) => handleEdit(e, i)}>\n                      <Edit />\n                    </IconButton>\n                    <IconButton color=\"primary\" aria-label=\"Remove\" component=\"span\" onClick={(e: any) => handleRemove(e, i)}>\n                      <Delete />\n                    </IconButton>\n                  </ButtonGroup>\n\n                </TableCell>\n              </TableRow>)\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <InputDialog initialData={initialData} open={open} onClose={() => setOpen(false)} onSubmit={handleSubmit} />\n      <Button onClick={handleOpen}>Add</Button>\n      <Button onClick={handleDownloadCSV}>Download as CSV</Button>\n      <input\n        accept=\"text/csv\"\n        id=\"contained-button-file\"\n        type=\"file\"\n        onChange={handleLoadCSV}\n      />\n      <label htmlFor=\"contained-button-file\">\n        <Button variant=\"contained\" color=\"primary\" component=\"span\">\n          Load CSV\n        </Button>\n      </label>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.tsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}