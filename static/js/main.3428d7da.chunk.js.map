{"version":3,"sources":["api/number.ts","api/transformer.ts","components/HousingInput.tsx","api/math.ts","components/InvestmentInput.tsx","components/InputDialog.tsx","api/csv.ts","App.tsx","serviceWorker.js","index.js"],"names":["HousingNumber","amount","period","raw","Error","acceptedPeriods","Number","includes","join","this","monthly","yearly","growableNumberCallbackNoop","n","GrowableNumber","start","rate","onBefore","onAfter","to","buildTransformers","obj","onChange","prop","type","event","target","value","HousingInput","housingTransformers","FormControl","variant","TextField","label","id","downPayment","InputProps","startAdornment","InputAdornment","position","FormHelperText","extraBedrooms","chargeForRoom","chargeForRoomIncrease","endAdornment","HouseInput","houseTransformers","v","insurance","taxes","repairCost","housePrice","growthRate","hoaFee","RentalInput","rentalTransformers","payment","paymentIncrease","Investment","principle","contribution","Loan","term","Housing","plan","utilityCost","House","loan","Rental","assert","condition","message","expect","console","warn","reccuringInvestment","base","invest","months","invests","investPerMonth","ratePerMonth","month","reccuringInvestmentWithGenerator","curr","investmentLoss","housing","investment","years","house","withoutHousing","rentIncome","loanPayment","withHousing","Math","pow","houseAppreciation","investmentLossHouse","monthlyPayment","investmentLossRental","numPayments","top","bottom","rental","InvestmentInput","investmentTransformers","principleTransformers","InputDialogData","housingType","InputDialog","initialData","onSubmit","onClose","open","React","useState","data","setData","useEffect","Dialog","aria-labelledby","DialogTitle","DialogContent","InputLabel","Select","labelId","MenuItem","e","DialogActions","Button","onClick","color","decodeCSV","model","csvRows","split","map","row","csvHeaders","csvModel","i","length","keys","slice","currentNode","j","key","fillCSVNode","csvNode","cols","fill","node","t","fromCSV","Boolean","csvBody","rows","JSON","parse","stringify","push","moneyFormatter","Intl","NumberFormat","style","currency","minimumFractionDigits","percentFormat","toFixed","App","setOpen","setRows","index","setIndex","setInitialData","a","files","file","fr","FileReader","onload","result","readAsText","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","rowSpan","align","colSpan","TableBody","isHouse","format","ButtonGroup","aria-label","IconButton","handleEdit","Edit","left","right","handleRemove","Delete","encodedUri","encodeURI","keyCount","encode","tree","m","visit","prefix","newPrefix","encodedValue","toCSV","Array","isArray","toString","csvCols","k","Object","encodeCSV","window","accept","htmlFor","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3428d7da.chunk.js","sourcesContent":["export type Period = 'monthly' | 'yearly'\n\nexport class HousingNumber {\n  constructor(public amount: number, public period: Period) {}\n\n  fromCSV(raw: any): HousingNumber {\n    if (!(\"amount\" in raw && \"period\" in raw)) {\n      throw Error(\"Parse error: amount and period have to exist\");\n    }\n\n    const acceptedPeriods = [\"yearly\", \"monthly\"];\n    let period: Period = \"yearly\";\n    const amount = Number(raw[\"amount\"]);\n    if (acceptedPeriods.includes(raw[\"period\"])) {\n      period = raw[\"period\"] as Period;\n    } else {\n      throw Error(`Parse error: period should be one of [${acceptedPeriods.join(\", \")}], but got ${raw[\"period\"]}`);\n    }\n\n    return new HousingNumber(amount, period);\n  }\n\n  to(period: Period): number {\n    switch (period) {\n      case \"monthly\":\n        return this.monthly();\n      case \"yearly\":\n        return this.yearly();\n    }\n  }\n\n  monthly(): number {\n    let amount = this.amount;\n    if (this.period === \"yearly\") {\n      amount /= 12;\n    }\n\n    return amount;\n  }\n\n  yearly(): number {\n    let amount = this.amount;\n    if (this.period === \"monthly\") {\n      amount *= 12;\n    }\n\n    return amount;\n  }\n}\n\ntype GrowableNumberCallback = (_: number) => number;\nconst growableNumberCallbackNoop: GrowableNumberCallback = (n: number): number => {\n  return n;\n}\n\nexport class GrowableNumber {\n  constructor(public start: number, public rate: HousingNumber) {}\n\n  *generator(period: Period, onBefore = growableNumberCallbackNoop, onAfter = growableNumberCallbackNoop): Generator<number> {\n    let start = this.start;\n\n    while (true){\n      start = onBefore(start);\n      start *= (1 + this.rate.to(period));\n      start = onAfter(start);\n      yield start;\n    }\n  }\n}\n","import {  Period, HousingNumber} from \"./number\";\n\nexport function buildTransformers<T>(obj: T, onChange: (_: T) => void) {\n    return {\n        \"HousingNumber\": (prop: keyof T, type: Period) =>\n      (event: React.ChangeEvent<HTMLInputElement>) => {\n        onChange({\n          ...obj,\n          [prop]: new HousingNumber(Number(event.target.value), type)\n        });\n      },\n    \"Number\": (prop: keyof T) =>\n      (event: React.ChangeEvent<HTMLInputElement>) => {\n        onChange({\n          ...obj,\n          [prop]: Number(event.target.value)\n        });\n      }\n  };\n}\n    ","import React from 'react';\nimport {\n  Housing,\n  House,\n  Rental\n} from '../api/math'\nimport {\n  FormControl,\n  FormHelperText,\n  InputAdornment,\n  TextField\n} from '@material-ui/core';\nimport { buildTransformers } from '../api/transformer';\n\ntype HousingInputProps = {\n  value: Housing,\n  onChange: (value: Housing) => void,\n};\n\nfunction HousingInput({value, onChange}: HousingInputProps) {\n  const housingTransformers = buildTransformers(value, onChange);\n\n  return (\n    <div>\n      <FormControl variant=\"filled\">\n        <TextField\n          label=\"Upfront Costs\"\n          id=\"standard-number\"\n          type=\"number\"\n          value={value.downPayment}\n          onChange={housingTransformers.Number('downPayment')}\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n          }}\n        />\n        <FormHelperText>e.g. move-in fees, non-refundable fees, pizza + beer for your friends who helped you move</FormHelperText>\n      </FormControl>\n      <br />\n      <FormControl variant=\"filled\">\n        <TextField\n          label=\"Spare Rooms\"\n          id=\"standard-number\"\n          type=\"number\"\n          value={value.extraBedrooms}\n          onChange={housingTransformers.Number('extraBedrooms')}\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n          }}\n        />\n        <FormHelperText>Fill this field if you plan to rent out your extra room(s)</FormHelperText>\n      </FormControl>\n      <br />\n      <FormControl variant=\"filled\">\n        <TextField\n          label=\"Charge per Room\"\n          id=\"standard-number\"\n          type=\"number\"\n          value={value.chargeForRoom.monthly()}\n          onChange={housingTransformers.HousingNumber('chargeForRoom', 'monthly')}\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n          }}\n        />\n        <FormHelperText>How much you plan to charge for each spare room(s)</FormHelperText>\n      </FormControl>\n      <br />\n      <FormControl variant=\"filled\">\n        <TextField\n          label=\"Charge per Room\"\n          id=\"standard-number\"\n          type=\"number\"\n          value={value.chargeForRoomIncrease.yearly()}\n          onChange={housingTransformers.HousingNumber('chargeForRoomIncrease', 'yearly')}\n          InputProps={{\n            endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n          }}\n        />\n        <FormHelperText>How much you plan to increase the rent for your spare room(s) each year</FormHelperText>\n      </FormControl>\n      <br />\n    </div>\n  );\n}\n\n\ntype HouseInputProps = {\n  value: House,\n  onChange: (value: House) => void\n};\n\nexport function HouseInput({value, onChange}: HouseInputProps) {\n  const houseTransformers = buildTransformers(value, onChange);\n\n  return (\n    <div>\n      <HousingInput value={value} onChange={(v: Housing) => onChange({...value, ...v})} />\n      <div>\n        <FormControl variant=\"filled\">\n          <TextField\n            label=\"Monthly Home Insurance\"\n            id=\"standard-number\"\n            type=\"number\"\n            value={value.insurance.monthly()}\n            onChange={houseTransformers.HousingNumber('insurance', 'yearly')}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n            }}\n          />\n          <FormHelperText>Expected home insurance monthly payment</FormHelperText>\n        </FormControl>\n        <br />\n        <FormControl variant=\"filled\">\n          <TextField\n            label=\"Monthly Property Taxes\"\n            id=\"standard-number\"\n            type=\"number\"\n            value={value.taxes.monthly()}\n            onChange={houseTransformers.HousingNumber('taxes', 'yearly')}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n            }}\n          />\n          <FormHelperText>Expected property taxes per month</FormHelperText>\n        </FormControl>\n        <br />\n        <FormControl variant=\"filled\">\n          <TextField\n            label=\"Annual Repair Cost\"\n            id=\"standard-number\"\n            type=\"number\"\n            value={value.repairCost.yearly()}\n            onChange={houseTransformers.HousingNumber('repairCost', 'yearly')}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n            }}\n          />\n          <FormHelperText>How much you expect to spend annually on home repairs</FormHelperText>\n        </FormControl>\n        <br />\n        <FormControl variant=\"filled\">\n          <TextField\n            label=\"House Price\"\n            id=\"standard-number\"\n            type=\"number\"\n            value={value.housePrice}\n            onChange={houseTransformers.Number('housePrice')}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n            }}\n          />\n          <FormHelperText>How much you expect to pay for the home</FormHelperText>\n        </FormControl>\n        <br />\n        <FormControl variant=\"filled\">\n          <TextField\n            label=\"Home Value Appreciation\"\n            id=\"standard-number\"\n            type=\"number\"\n            value={value.growthRate.yearly()}\n            onChange={houseTransformers.HousingNumber('growthRate', 'yearly')}\n            InputProps={{\n              endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n\n            }}\n          />\n          <FormHelperText>How much you expect home value to go up each year</FormHelperText>\n        </FormControl>\n        <br />\n        <FormControl variant=\"filled\">\n          <TextField\n            label=\"HOA Fee\"\n            id=\"standard-number\"\n            type=\"number\"\n            value={value.hoaFee.monthly()}\n            onChange={houseTransformers.HousingNumber('hoaFee', 'monthly')}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n\n            }}\n          />\n          <FormHelperText>Home Owner's Association Monthly Fee</FormHelperText>\n        </FormControl>\n      </div>\n\n    </div>\n  );\n}\n\n\ntype RentalInputProps = {\n  value: Rental,\n  onChange: (value: Rental) => void\n};\n\nexport function RentalInput({value, onChange}: RentalInputProps) {\n  const rentalTransformers = buildTransformers(value, onChange);\n\n  return (\n    <div>\n      <HousingInput value={value} onChange={(v: Housing) => onChange({...value, ...v})} />\n      <div>\n        <FormControl variant=\"filled\">\n          <TextField\n            label=\"Monthly Rent Payment\"\n            id=\"standard-number\"\n            type=\"number\"\n            value={value.payment.monthly()}\n            onChange={rentalTransformers.HousingNumber('payment', 'monthly')}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n            }}\n          />\n        </FormControl>\n        <FormControl variant=\"filled\">\n          <TextField\n            label=\"Payment Increase Rate\"\n            id=\"standard-number\"\n            type=\"number\"\n            value={value.paymentIncrease.yearly()}\n            onChange={rentalTransformers.HousingNumber('paymentIncrease', 'yearly')}\n            InputProps={{\n              endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n\n            }}\n          />\n          <FormHelperText>How much you expect rent to go up annually</FormHelperText>\n        </FormControl>\n      </div>\n\n    </div>\n  );\n}\n","import { HousingNumber, GrowableNumber } from \"./number\";\n\nexport type Plan = 'house' | 'rental'\n\nexport class Investment {\n  principle = new GrowableNumber(100000, new HousingNumber(0.06, \"yearly\"));\n  contribution = new HousingNumber(1000, \"monthly\");\n}\n\nexport class Loan {\n  term = 30;\n  principle = new GrowableNumber(200000, new HousingNumber(0.03, \"yearly\"));\n}\n\nexport class Housing {\n  plan: Plan = \"house\";\n  downPayment = 50000;\n  chargeForRoom = new HousingNumber(600, \"monthly\");\n  chargeForRoomIncrease = new HousingNumber(0.03, \"yearly\");\n  extraBedrooms = 0;\n  utilityCost = new HousingNumber(100, \"monthly\");\n}\n\nexport class House extends Housing {\n  plan = \"house\" as Plan;\n  repairCost = new HousingNumber(500, \"yearly\");\n  housePrice = 250000;\n  growthRate = new HousingNumber(0.04, \"yearly\");\n  hoaFee = new HousingNumber(250, \"monthly\");\n  loan = new Loan();\n  insurance = new HousingNumber(85, \"monthly\");\n  taxes = new HousingNumber(202, \"monthly\");\n}\n\nexport class Rental extends Housing {\n  plan = \"rental\" as Plan;\n  paymentIncrease = new HousingNumber(0.04, \"yearly\");\n  payment = new HousingNumber(900, \"monthly\");\n}\n\nfunction assert(condition: boolean, message?: string) {\n  if (!condition) {\n    throw new Error(\"Abort assertion failed\" + message ? \": \" + message : '');\n  }\n}\n\nfunction expect(condition: boolean, message?: string) {\n  if (!condition) {\n    console.warn(\"Condition not met\" + message ? \": \" + message : '');\n  }\n}\n\n/*\n   'base' is how much you spend the first year\n   'base' + 'base' * 'rate' is how much you spend the next year\n   etc. \n\n   exponentialSum computes the total amount of money you spent over a specified amount of 'years'\n*/\nexport function exponentialSum(base: GrowableNumber, years: number): number {\n  expect(base.rate.yearly() >= 0 && base.rate.yearly() <= 1, \"rate is not between 0 and 1\");\n  assert(base.start >= 0, \"base is negative\");\n  assert(years >= 0, \"years is negative\");\n\n  let total = base.start;\n  let year = 1;\n\n  for (const current of base.generator(\"yearly\")) {\n    if (year >= years) {\n      break;\n    }\n    \n    total += current;\n    year += 1;\n  }\n\n  return total;\n};\n\n/**\n * Computes the amount of money you will have after investing for 'months' assuming you have 'base'\n *    (principle) invested and you add 'invest' money to the investment and the investe money grows\n *    at a 'rate' each month\n * @param base principle, the amount of money invested at the start time\n * @param invest \n * @param rate \n * @param months \n */\nexport function reccuringInvestment(base: number, invest: HousingNumber, rate: HousingNumber, months: number): number {\n  const investPerMonth = invest.monthly();\n  const ratePerMonth = rate.monthly();\n  expect(ratePerMonth >= 0 && ratePerMonth <= 1, \"rate is not between 0 and 1\");\n  assert(investPerMonth >= 0, \"invest is negative\");\n  assert(base >= 0, \"base is negative\");\n  assert(months >= 0, \"months is negative\");\n  function* invests() {\n    for (let month = 0; month < months; month++) {\n      yield investPerMonth;\n    }\n  };\n\n  return reccuringInvestmentWithGenerator(base, invests(), rate);\n};\n\n/**\n * \n * @param base \n * @param invests \n * @param rate \n */\nexport function reccuringInvestmentWithGenerator(base: number, invests: Generator<number>, rate: HousingNumber): number {\n  let ratePerMonth = rate.monthly();\n  expect(ratePerMonth >= 0 && ratePerMonth <= 1, \"rate is not between 0 and 1\");\n  assert(base >= 0, \"base is negative\");\n  let curr = base;\n  ratePerMonth += 1;\n  for (const invest of invests) {\n    curr = curr * ratePerMonth + invest;\n  }\n  return curr;\n};\n\nexport function investmentLoss(housing: Housing, investment: Investment, years: number) {\n  assert(years >= 0, \"years is negative\");\n\n  switch (housing.plan) {\n    case \"house\":\n      return investmentLossHouse(housing as House, investment, years);\n    case \"rental\":\n      return investmentLossRental(housing as Rental, investment, years);\n    default:\n      throw new Error(\"Unsupported plan\");\n  }\n}\n\nfunction investmentLossHouse(house: House, investment: Investment, years: number) {\n  assert(years >= 0, \"years is negative\");\n\n  const withoutHousing = reccuringInvestment(\n    investment.principle.start,\n    investment.contribution,\n    investment.principle.rate,\n    years * 12);\n\n  function* invests() {\n    const months = years * 12;\n    let rentIncome = house.chargeForRoom.monthly() * house.extraBedrooms;\n    for (let month = 1; month <= months; month++) {\n      yield (\n        investment.contribution.monthly()\n        - loanPayment(house.loan).monthly()\n        - house.taxes.monthly()\n        - house.insurance.monthly()\n        - house.utilityCost.monthly()\n        - house.repairCost.monthly()\n        - house.hoaFee.monthly()\n        + rentIncome\n      );\n\n      if (month % 12 === 0) {\n        rentIncome *= (1 + house.chargeForRoomIncrease.yearly());\n      }\n    }\n  }\n\n  const withHousing = reccuringInvestmentWithGenerator(\n    investment.principle.start - house.downPayment,\n    invests(),\n    investment.principle.rate\n  ) + houseAppreciation(house, years);\n\n  return withoutHousing - withHousing;\n}\n\n// TODO: Find bug!!!\nfunction investmentLossRental(house: Rental, investment: Investment, years: number) {\n  assert(years >= 0, \"years is negative\");\n\n  const withoutHousing = reccuringInvestment(\n    investment.principle.start,\n    investment.contribution,\n    investment.principle.rate,\n    years * 12);\n\n  function* invests() {\n    const months = years * 12;\n    let monthlyPayment = house.payment.monthly();\n    for (let month = 1; month <= months; month++) {\n      yield (investment.contribution.monthly() - house.utilityCost.monthly() - monthlyPayment);\n      if (month % 12 === 0) {\n        monthlyPayment *= (1 + house.paymentIncrease.yearly());\n      }\n    }\n  }\n  const withHousing = reccuringInvestmentWithGenerator(\n    investment.principle.start - house.downPayment,\n    invests(),\n    investment.principle.rate);\n  return withoutHousing - withHousing;\n}\n\nexport function houseAppreciation(house: House, years: number) {\n  return house.housePrice * Math.pow(1 + house.growthRate.yearly(), years)\n}\n\nexport function loanPayment(loan: Loan) {\n  const numPayments = 12 * loan.term;\n  const rate = loan.principle.rate.monthly()\n  const top = rate * Math.pow(1 + rate, numPayments)\n  const bottom = Math.pow(1 + rate, numPayments) - 1\n  return new HousingNumber(loan.principle.start * top / bottom, \"monthly\")\n}\n\nexport function round(n: number) {\n  return +n.toFixed(2)\n}\n\nexport function loanPrinciple(loan: Loan, years: number) {\n  let loanAmount = loan.principle.start;\n  const months = years * 12;\n  const payment = loanPayment(loan).monthly()\n  for (let month = 0; month < months; month++) {\n    const interest = round(loanAmount * loan.principle.rate.monthly())\n    const principle = payment - interest\n    loanAmount -= principle;\n    if (loanAmount < 0) {loanAmount = 0; month = months;}\n  }\n  return Math.round(loanAmount);\n}\n\nfunction monthlyPaymentRental(rental: Rental) {\n  return rental.payment.monthly() + rental.utilityCost.monthly();\n}\n\nfunction monthlyPaymentHouse(house: House) {\n  return loanPayment(house.loan).monthly()\n    + house.hoaFee.monthly()\n    + house.insurance.monthly()\n    + house.taxes.monthly()\n    + house.repairCost.monthly()\n    + house.utilityCost.monthly()\n}\n\nexport function monthlyPayment(housing: Housing) {\n  const isHouse = housing.plan === 'house';\n  return isHouse ? monthlyPaymentHouse(housing as House) : monthlyPaymentRental(housing as Rental);\n}\n","import React from 'react';\nimport {\n  Investment\n} from '../api/math'\nimport {\n  FormControl,\n  InputAdornment,\n  TextField,\n  FormHelperText\n} from '@material-ui/core';\nimport { buildTransformers } from '../api/transformer';\n\ntype InvestmentInputProps = {\n  value: Investment,\n  onChange: (value: Investment) => void,\n};\n\nexport function InvestmentInput({value, onChange}: InvestmentInputProps) {\n  const investmentTransformers = buildTransformers(value, onChange);\n  const principleTransformers = buildTransformers(value.principle, (n) => {\n    onChange({\n      ...value,\n      principle: n\n    });\n  });\n\n  return (\n    <div>\n      <FormControl variant=\"filled\">\n        <TextField\n          label=\"Investment Principle\"\n          id=\"standard-number\"\n          type=\"number\"\n          value={value.principle}\n          onChange={principleTransformers.Number('start')}\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n          }}\n        />\n        <FormHelperText>How much money do you have currently (we expect you to take your down payment out of this money)</FormHelperText>\n      </FormControl>\n      <br />\n      <FormControl variant=\"filled\">\n        <TextField\n          label=\"Monthly Contribution\"\n          id=\"standard-number\"\n          type=\"number\"\n          value={value.contribution.monthly()}\n          onChange={investmentTransformers.HousingNumber('contribution', 'monthly')}\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n          }}\n        />\n        <FormHelperText>How much do you contribute to your principle each month?</FormHelperText>\n      </FormControl>\n\n      <br />\n      <FormControl variant=\"filled\">\n        <TextField\n          label=\"Average Return\"\n          id=\"standard-number\"\n          type=\"number\"\n          value={value.principle.rate.yearly()}\n          onChange={principleTransformers.HousingNumber('rate', \"yearly\")}\n          InputProps={{\n            endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n          }}\n        />\n        <FormHelperText>What is the annual average rate of return of your portfolio?</FormHelperText>\n      </FormControl>\n      <br />\n    </div>\n  );\n}\n","import React from 'react';\nimport {\n  FormControl,\n  MenuItem,\n  Select,\n  FormHelperText,\n  InputLabel,\n  TextField,\n  InputAdornment,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle\n} from '@material-ui/core';\nimport {HouseInput, RentalInput} from './HousingInput'\nimport {Plan, House, Rental, Investment} from '../api/math';\nimport {InvestmentInput} from './InvestmentInput';\n\nconst DEFAULT_PROJECTED_YEARS = 10;\n\nexport class InputDialogData {\n  housingType: Plan = \"house\";\n  house = new House();\n  rental = new Rental();\n  investment = new Investment();\n  years = DEFAULT_PROJECTED_YEARS;\n};\n\nexport interface InputDialogProps {\n  initialData: InputDialogData;\n  open: boolean;\n  onClose: () => void;\n  onSubmit: (data: InputDialogData) => void\n};\n\nexport function InputDialog({initialData, onSubmit, onClose, open}: InputDialogProps) {\n  const [data, setData] = React.useState<InputDialogData>(initialData);\n\n  React.useEffect(() => {\n    setData(initialData);\n  }, [initialData]);\n\n  const handleChange = (event: React.ChangeEvent<{value: unknown}>) => {\n    const value = event.target.value as Plan;\n    setData({...data, housingType: value});\n  };\n\n  let HousingInput;\n  switch (data.housingType) {\n    case \"house\":\n      HousingInput = <HouseInput value={data.house} onChange={v => setData({...data, house: v})} />\n      break;\n    case \"rental\":\n      HousingInput = <RentalInput value={data.rental} onChange={v => setData({...data, rental: v})} />\n      break;\n  }\n\n  return (\n    <Dialog open={open} onClose={onClose} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle id=\"form-dialog-title\">Subscribe</DialogTitle>\n      <DialogContent>\n        <FormControl>\n          <InputLabel id=\"select-housing-type\">Housing Type</InputLabel>\n          <Select\n            labelId=\"select-housing-type\"\n            value={data.housingType}\n            onChange={handleChange}\n          >\n            <MenuItem value={'house'}>House</MenuItem>\n            <MenuItem value={'rental'}>Apartment</MenuItem>\n          </Select>\n          <FormHelperText>Select housing type to compare</FormHelperText>\n        </FormControl>\n        {HousingInput}\n        <InvestmentInput value={data.investment} onChange={v => setData({...data, investment: v})} />\n        <FormControl variant=\"filled\">\n          <TextField\n            label=\"Projected Years\"\n            id=\"standard-number\"\n            type=\"number\"\n            value={data.years}\n            onChange={e => setData({...data, years: Number(e.target.value)})}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n            }}\n          />\n          <FormHelperText>How long do you plan to stay in this housing situation?</FormHelperText>\n        </FormControl>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\">\n          Cancel\n          </Button>\n        <Button color=\"primary\" onClick={() => onSubmit(data)}>Submit</Button>\n      </DialogActions>\n    </Dialog >\n  );\n}\n","export function decodeCSV<T extends any>(raw: string, model: T): T[] {\n  const csvRows = raw.split('\\n').map(row => row.split(','));\n  const csvHeaders = csvRows[0];\n\n  const csvModel = {} as any;\n  for (let i = 0; i < csvHeaders.length; i++) {\n    const csvHeader = csvHeaders[i];\n    // first dot always represents root, ignoring.\n    const keys = csvHeader.split(\".\").slice(1);\n    let currentNode = csvModel;\n\n\n    for (let j = 0; j < keys.length; j++) {\n      const key = keys[j];\n      if (!(key in currentNode)) {\n        currentNode[key] = j === keys.length - 1 ? i : {};\n      }\n\n      currentNode = currentNode[key];\n    }\n  }\n\n  function fillCSVNode(csvNode: any, cols: string[]) {\n    for (const key in csvNode) {\n      const value = csvNode[key];\n\n      if (typeof value === \"number\") {\n        csvNode[key] = cols[value];\n      } else {\n        fillCSVNode(value, cols);\n      }\n    }\n\n    return csvNode;\n  }\n\n  function fill(node: any, csvNode: any, model: any) {\n    if (!node) {\n      return;\n    }\n\n    for (const key in model) {\n      const value = model[key];\n      let t;\n\n      if (typeof value.fromCSV === \"function\") {\n        node[key] = value.fromCSV(csvNode[key]);\n        continue;\n      }\n\n      switch (t = typeof value) {\n        case \"number\":\n          node[key] = Number(csvNode[key]);\n          break;\n        case \"boolean\":\n          node[key] = Boolean(csvNode[key]);\n          break;\n        case \"string\":\n          node[key] = csvNode[key];\n          break;\n        case \"object\":\n          fill(node[key], csvNode[key], value);\n          break;\n        default:\n          throw Error(`Unsupported type: ${t}`);\n      }\n    }\n  }\n\n  // ignore headers\n  const csvBody = csvRows.slice(1);\n  const rows = [];\n  for (let i = 0; i < csvBody.length; i++) {\n    // deep copy models\n    const row = JSON.parse(JSON.stringify(model));\n    const csvNode = JSON.parse(JSON.stringify(csvModel));\n\n    fillCSVNode(csvNode, csvBody[i]);\n    fill(row, csvNode, model);\n    rows.push(row);\n  }\n\n  return rows;\n}\n\nexport function encodeCSV(rows: any[]): string {\n  const csvRows = [];\n  const keys = {} as any;\n  let keyCount = 0;\n\n  function encode(tree: any): any {\n    const m = {} as any;\n\n    function visit(node: any, prefix: string) {\n      if (!node) {\n        return;\n      }\n\n      for (const key in node) {\n        const newPrefix = `${prefix}.${key}`;\n        const value = node[key];\n        let encodedValue = null;\n\n        if (typeof value.toCSV === \"function\") {\n          encodedValue = value.toCSV();\n        } else if (Array.isArray(value)) {\n          // TODO\n        } else if (typeof value === 'object') {\n          visit(value, newPrefix);\n        } else if (typeof value.toString === \"function\") {\n          encodedValue = value.toString();\n        } else {\n          encodedValue = value;\n        }\n\n        if (encodedValue) {\n          m[newPrefix] = encodedValue;\n\n          if (!(newPrefix in keys)) {\n            keys[newPrefix] = keyCount;\n            keyCount++;\n          }\n        }\n      }\n    }\n\n    visit(tree, \"\");\n    return m;\n  }\n\n  for (const row of rows) {\n    const m = encode(row);\n    const csvCols = new Array(keyCount);\n\n    for (const k in m) {\n      const i = keys[k];\n      csvCols[i] = m[k];\n    }\n\n    csvRows.push(csvCols);\n  }\n\n  return Object.keys(keys).join(\",\") + \"\\n\"\n    + csvRows.map(e => e.join(\",\")).join(\"\\n\");\n}\n","import React from 'react';\nimport {\n  Button,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  IconButton,\n  ButtonGroup,\n} from '@material-ui/core';\nimport {Edit, Delete} from \"@material-ui/icons\";\nimport {InputDialog, InputDialogData} from './components/InputDialog';\nimport {Housing, monthlyPayment, investmentLoss} from './api/math';\nimport {encodeCSV, decodeCSV} from './api/csv'\n\nconst moneyFormatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n  minimumFractionDigits: 2\n})\n\nfunction percentFormat(rate: number): string {\n  return (rate * 100).toFixed(2) + '%'\n}\n\nfunction App() {\n  const [open, setOpen] = React.useState(false);\n  const [rows, setRows] = React.useState<InputDialogData[]>([]);\n  const [index, setIndex] = React.useState(-1);\n  const [initialData, setInitialData] = React.useState<InputDialogData>(new InputDialogData());\n\n  function handleDownloadCSV() {\n    const encodedUri = encodeURI(\"data:text/csv;charset=utf-8,\" + encodeCSV(rows));\n    window.open(encodedUri);\n  }\n\n  async function handleLoadCSV(event: React.ChangeEvent<HTMLInputElement>) {\n    const files = event.target.files;\n    if (!files) {\n      return;\n    }\n\n    const file = files[0];\n    if (!file) {\n      return;\n    }\n\n    const fr = new FileReader();\n    fr.onload = () => {\n      setRows(decodeCSV(fr.result as string, new InputDialogData()));\n    }\n    fr.readAsText(file);\n  }\n\n  const handleSubmit = (data: InputDialogData) => {\n    if (index < 0 || index >= rows.length) {\n      setRows([\n        ...rows,\n        data\n      ]);\n    } else {\n      rows[index] = data;\n      setRows([...rows]);\n    }\n    setOpen(false);\n  };\n\n  function handleOpen() {\n    setIndex(-1);\n    setOpen(true);\n  }\n\n  function handleRemove(i: number) {\n    const left = rows.slice(0, i) || [];\n    const right = rows.slice(i + 1) || [];\n    setRows([...left, ...right]);\n  }\n\n  function handleEdit(i: number) {\n    setIndex(i);\n    setInitialData(rows[i]);\n    setOpen(true);\n  }\n\n  return (\n    <div>\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell rowSpan={2} align=\"center\">Housing Type</TableCell>\n              <TableCell rowSpan={2} align=\"center\">Projected Years</TableCell>\n              <TableCell colSpan={6} align=\"center\">Housing</TableCell>\n              <TableCell colSpan={4} align=\"center\">House</TableCell>\n              <TableCell colSpan={1} align=\"center\">Apartment</TableCell>\n              <TableCell colSpan={4} align=\"center\">Investment</TableCell>\n              <TableCell rowSpan={2} align=\"center\">Actions</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell align=\"center\">Monthly Payment</TableCell>\n              <TableCell align=\"center\">Down Payment</TableCell>\n              <TableCell align=\"center\">Extra Bedrooms</TableCell>\n              <TableCell align=\"center\">Change per Room</TableCell>\n              <TableCell align=\"center\">Change per Room Increase Rate</TableCell>\n              <TableCell align=\"center\">Utility Cost</TableCell>\n\n              <TableCell align=\"center\">Repair Cost</TableCell>\n              <TableCell align=\"center\">House Price</TableCell>\n              <TableCell align=\"center\">House Appreciation Rate</TableCell>\n              <TableCell align=\"center\">HOA Fee</TableCell>\n\n              <TableCell align=\"center\">Monthly Payment Increase Rate</TableCell>\n\n              <TableCell align=\"center\">Principle</TableCell>\n              <TableCell align=\"center\">Contribution</TableCell>\n              <TableCell align=\"center\">Growth Rate</TableCell>\n\n              <TableCell align=\"center\">Investment Loss</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row, i) => {\n              const isHouse = row.housingType === 'house';\n              const housing: Housing = isHouse ? row.house : row.rental;\n              return (<TableRow>\n                <TableCell align=\"center\">{row.housingType}</TableCell>\n                <TableCell align=\"center\">{row.years}</TableCell>\n\n                <TableCell align=\"center\">{moneyFormatter.format(monthlyPayment(isHouse ? row.house : row.rental))}</TableCell>\n                <TableCell align=\"center\">{moneyFormatter.format(housing.downPayment)}</TableCell>\n                <TableCell align=\"center\">{housing.extraBedrooms}</TableCell>\n                <TableCell align=\"center\">{moneyFormatter.format(housing.chargeForRoom.monthly())}</TableCell>\n                <TableCell align=\"center\">{percentFormat(housing.chargeForRoomIncrease.yearly())}</TableCell>\n                <TableCell align=\"center\">{moneyFormatter.format(housing.utilityCost.monthly())}</TableCell>\n\n                <TableCell align=\"center\">{isHouse ? moneyFormatter.format(row.house.repairCost.yearly()) : 'N/A'}</TableCell>\n                <TableCell align=\"center\">{isHouse ? moneyFormatter.format(row.house.housePrice) : 'N/A'}</TableCell>\n                <TableCell align=\"center\">{isHouse ? percentFormat(row.house.growthRate.yearly()) : 'N/A'}</TableCell>\n                <TableCell align=\"center\">{isHouse ? moneyFormatter.format(row.house.hoaFee.monthly()) : 'N/A'}</TableCell>\n\n                <TableCell align=\"center\">{!isHouse ? percentFormat(row.rental.paymentIncrease.yearly()) : 'N/A'}</TableCell>\n\n                <TableCell align=\"center\">{moneyFormatter.format(row.investment.principle.start)}</TableCell>\n                <TableCell align=\"center\">{moneyFormatter.format(row.investment.contribution.monthly())}</TableCell>\n                <TableCell align=\"center\">{percentFormat(row.investment.principle.rate.yearly())}</TableCell>\n\n                <TableCell align=\"center\">{moneyFormatter.format(investmentLoss(housing, row.investment, row.years))}</TableCell>\n                <TableCell align=\"center\">\n                  <ButtonGroup variant=\"text\" color=\"primary\" aria-label=\"text primary button group\">\n                    <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\" onClick={() => handleEdit(i)}>\n                      <Edit />\n                    </IconButton>\n                    <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\" onClick={() => handleRemove(i)}>\n                      <Delete />\n                    </IconButton>\n                  </ButtonGroup>\n\n                </TableCell>\n              </TableRow>)\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <InputDialog initialData={initialData} open={open} onClose={() => setOpen(false)} onSubmit={handleSubmit} />\n      <Button onClick={handleOpen}>Add</Button>\n      <Button onClick={handleDownloadCSV}>Download as CSV</Button>\n      <input\n        accept=\"text/csv\"\n        id=\"contained-button-file\"\n        type=\"file\"\n        onChange={handleLoadCSV}\n      />\n      <label htmlFor=\"contained-button-file\">\n        <Button variant=\"contained\" color=\"primary\" component=\"span\">\n          Load CSV\n        </Button>\n      </label>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.tsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}